
Workshop6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004178  08004178  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017bc  00000000  00000000  0002babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002035d  00000000  00000000  0002e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcfc  00000000  00000000  0004e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c46a0  00000000  00000000  0005a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011eb91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f8  00000000  00000000  0011ebe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003df0 	.word	0x08003df0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003df0 	.word	0x08003df0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__aeabi_uldivmod>:
 8000580:	b953      	cbnz	r3, 8000598 <__aeabi_uldivmod+0x18>
 8000582:	b94a      	cbnz	r2, 8000598 <__aeabi_uldivmod+0x18>
 8000584:	2900      	cmp	r1, #0
 8000586:	bf08      	it	eq
 8000588:	2800      	cmpeq	r0, #0
 800058a:	bf1c      	itt	ne
 800058c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000590:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000594:	f000 b96e 	b.w	8000874 <__aeabi_idiv0>
 8000598:	f1ad 0c08 	sub.w	ip, sp, #8
 800059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr

080005b0 <__udivmoddi4>:
 80005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b4:	9d08      	ldr	r5, [sp, #32]
 80005b6:	4604      	mov	r4, r0
 80005b8:	468c      	mov	ip, r1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	f040 8083 	bne.w	80006c6 <__udivmoddi4+0x116>
 80005c0:	428a      	cmp	r2, r1
 80005c2:	4617      	mov	r7, r2
 80005c4:	d947      	bls.n	8000656 <__udivmoddi4+0xa6>
 80005c6:	fab2 f282 	clz	r2, r2
 80005ca:	b142      	cbz	r2, 80005de <__udivmoddi4+0x2e>
 80005cc:	f1c2 0020 	rsb	r0, r2, #32
 80005d0:	fa24 f000 	lsr.w	r0, r4, r0
 80005d4:	4091      	lsls	r1, r2
 80005d6:	4097      	lsls	r7, r2
 80005d8:	ea40 0c01 	orr.w	ip, r0, r1
 80005dc:	4094      	lsls	r4, r2
 80005de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005e2:	0c23      	lsrs	r3, r4, #16
 80005e4:	fbbc f6f8 	udiv	r6, ip, r8
 80005e8:	fa1f fe87 	uxth.w	lr, r7
 80005ec:	fb08 c116 	mls	r1, r8, r6, ip
 80005f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f4:	fb06 f10e 	mul.w	r1, r6, lr
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x60>
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000602:	f080 8119 	bcs.w	8000838 <__udivmoddi4+0x288>
 8000606:	4299      	cmp	r1, r3
 8000608:	f240 8116 	bls.w	8000838 <__udivmoddi4+0x288>
 800060c:	3e02      	subs	r6, #2
 800060e:	443b      	add	r3, r7
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	b2a4      	uxth	r4, r4
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3310 	mls	r3, r8, r0, r3
 800061c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000620:	fb00 fe0e 	mul.w	lr, r0, lr
 8000624:	45a6      	cmp	lr, r4
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x8c>
 8000628:	193c      	adds	r4, r7, r4
 800062a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800062e:	f080 8105 	bcs.w	800083c <__udivmoddi4+0x28c>
 8000632:	45a6      	cmp	lr, r4
 8000634:	f240 8102 	bls.w	800083c <__udivmoddi4+0x28c>
 8000638:	3802      	subs	r0, #2
 800063a:	443c      	add	r4, r7
 800063c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000640:	eba4 040e 	sub.w	r4, r4, lr
 8000644:	2600      	movs	r6, #0
 8000646:	b11d      	cbz	r5, 8000650 <__udivmoddi4+0xa0>
 8000648:	40d4      	lsrs	r4, r2
 800064a:	2300      	movs	r3, #0
 800064c:	e9c5 4300 	strd	r4, r3, [r5]
 8000650:	4631      	mov	r1, r6
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	b902      	cbnz	r2, 800065a <__udivmoddi4+0xaa>
 8000658:	deff      	udf	#255	; 0xff
 800065a:	fab2 f282 	clz	r2, r2
 800065e:	2a00      	cmp	r2, #0
 8000660:	d150      	bne.n	8000704 <__udivmoddi4+0x154>
 8000662:	1bcb      	subs	r3, r1, r7
 8000664:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000668:	fa1f f887 	uxth.w	r8, r7
 800066c:	2601      	movs	r6, #1
 800066e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000672:	0c21      	lsrs	r1, r4, #16
 8000674:	fb0e 331c 	mls	r3, lr, ip, r3
 8000678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800067c:	fb08 f30c 	mul.w	r3, r8, ip
 8000680:	428b      	cmp	r3, r1
 8000682:	d907      	bls.n	8000694 <__udivmoddi4+0xe4>
 8000684:	1879      	adds	r1, r7, r1
 8000686:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800068a:	d202      	bcs.n	8000692 <__udivmoddi4+0xe2>
 800068c:	428b      	cmp	r3, r1
 800068e:	f200 80e9 	bhi.w	8000864 <__udivmoddi4+0x2b4>
 8000692:	4684      	mov	ip, r0
 8000694:	1ac9      	subs	r1, r1, r3
 8000696:	b2a3      	uxth	r3, r4
 8000698:	fbb1 f0fe 	udiv	r0, r1, lr
 800069c:	fb0e 1110 	mls	r1, lr, r0, r1
 80006a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80006a4:	fb08 f800 	mul.w	r8, r8, r0
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	d907      	bls.n	80006bc <__udivmoddi4+0x10c>
 80006ac:	193c      	adds	r4, r7, r4
 80006ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x10a>
 80006b4:	45a0      	cmp	r8, r4
 80006b6:	f200 80d9 	bhi.w	800086c <__udivmoddi4+0x2bc>
 80006ba:	4618      	mov	r0, r3
 80006bc:	eba4 0408 	sub.w	r4, r4, r8
 80006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c4:	e7bf      	b.n	8000646 <__udivmoddi4+0x96>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0x12e>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	f000 80b1 	beq.w	8000832 <__udivmoddi4+0x282>
 80006d0:	2600      	movs	r6, #0
 80006d2:	e9c5 0100 	strd	r0, r1, [r5]
 80006d6:	4630      	mov	r0, r6
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f683 	clz	r6, r3
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d14a      	bne.n	800077c <__udivmoddi4+0x1cc>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0x140>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80b8 	bhi.w	8000860 <__udivmoddi4+0x2b0>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0103 	sbc.w	r1, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	468c      	mov	ip, r1
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0a8      	beq.n	8000650 <__udivmoddi4+0xa0>
 80006fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000702:	e7a5      	b.n	8000650 <__udivmoddi4+0xa0>
 8000704:	f1c2 0320 	rsb	r3, r2, #32
 8000708:	fa20 f603 	lsr.w	r6, r0, r3
 800070c:	4097      	lsls	r7, r2
 800070e:	fa01 f002 	lsl.w	r0, r1, r2
 8000712:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000716:	40d9      	lsrs	r1, r3
 8000718:	4330      	orrs	r0, r6
 800071a:	0c03      	lsrs	r3, r0, #16
 800071c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	fb0e 1116 	mls	r1, lr, r6, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb06 f108 	mul.w	r1, r6, r8
 8000730:	4299      	cmp	r1, r3
 8000732:	fa04 f402 	lsl.w	r4, r4, r2
 8000736:	d909      	bls.n	800074c <__udivmoddi4+0x19c>
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800073e:	f080 808d 	bcs.w	800085c <__udivmoddi4+0x2ac>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 808a 	bls.w	800085c <__udivmoddi4+0x2ac>
 8000748:	3e02      	subs	r6, #2
 800074a:	443b      	add	r3, r7
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b281      	uxth	r1, r0
 8000750:	fbb3 f0fe 	udiv	r0, r3, lr
 8000754:	fb0e 3310 	mls	r3, lr, r0, r3
 8000758:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800075c:	fb00 f308 	mul.w	r3, r0, r8
 8000760:	428b      	cmp	r3, r1
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x1c4>
 8000764:	1879      	adds	r1, r7, r1
 8000766:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800076a:	d273      	bcs.n	8000854 <__udivmoddi4+0x2a4>
 800076c:	428b      	cmp	r3, r1
 800076e:	d971      	bls.n	8000854 <__udivmoddi4+0x2a4>
 8000770:	3802      	subs	r0, #2
 8000772:	4439      	add	r1, r7
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800077a:	e778      	b.n	800066e <__udivmoddi4+0xbe>
 800077c:	f1c6 0c20 	rsb	ip, r6, #32
 8000780:	fa03 f406 	lsl.w	r4, r3, r6
 8000784:	fa22 f30c 	lsr.w	r3, r2, ip
 8000788:	431c      	orrs	r4, r3
 800078a:	fa20 f70c 	lsr.w	r7, r0, ip
 800078e:	fa01 f306 	lsl.w	r3, r1, r6
 8000792:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000796:	fa21 f10c 	lsr.w	r1, r1, ip
 800079a:	431f      	orrs	r7, r3
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a2:	fa1f f884 	uxth.w	r8, r4
 80007a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80007aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007ae:	fb09 fa08 	mul.w	sl, r9, r8
 80007b2:	458a      	cmp	sl, r1
 80007b4:	fa02 f206 	lsl.w	r2, r2, r6
 80007b8:	fa00 f306 	lsl.w	r3, r0, r6
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x220>
 80007be:	1861      	adds	r1, r4, r1
 80007c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007c4:	d248      	bcs.n	8000858 <__udivmoddi4+0x2a8>
 80007c6:	458a      	cmp	sl, r1
 80007c8:	d946      	bls.n	8000858 <__udivmoddi4+0x2a8>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4421      	add	r1, r4
 80007d0:	eba1 010a 	sub.w	r1, r1, sl
 80007d4:	b2bf      	uxth	r7, r7
 80007d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80007da:	fb0e 1110 	mls	r1, lr, r0, r1
 80007de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007e2:	fb00 f808 	mul.w	r8, r0, r8
 80007e6:	45b8      	cmp	r8, r7
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x24a>
 80007ea:	19e7      	adds	r7, r4, r7
 80007ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007f0:	d22e      	bcs.n	8000850 <__udivmoddi4+0x2a0>
 80007f2:	45b8      	cmp	r8, r7
 80007f4:	d92c      	bls.n	8000850 <__udivmoddi4+0x2a0>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4427      	add	r7, r4
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	eba7 0708 	sub.w	r7, r7, r8
 8000802:	fba0 8902 	umull	r8, r9, r0, r2
 8000806:	454f      	cmp	r7, r9
 8000808:	46c6      	mov	lr, r8
 800080a:	4649      	mov	r1, r9
 800080c:	d31a      	bcc.n	8000844 <__udivmoddi4+0x294>
 800080e:	d017      	beq.n	8000840 <__udivmoddi4+0x290>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x27a>
 8000812:	ebb3 020e 	subs.w	r2, r3, lr
 8000816:	eb67 0701 	sbc.w	r7, r7, r1
 800081a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800081e:	40f2      	lsrs	r2, r6
 8000820:	ea4c 0202 	orr.w	r2, ip, r2
 8000824:	40f7      	lsrs	r7, r6
 8000826:	e9c5 2700 	strd	r2, r7, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	462e      	mov	r6, r5
 8000834:	4628      	mov	r0, r5
 8000836:	e70b      	b.n	8000650 <__udivmoddi4+0xa0>
 8000838:	4606      	mov	r6, r0
 800083a:	e6e9      	b.n	8000610 <__udivmoddi4+0x60>
 800083c:	4618      	mov	r0, r3
 800083e:	e6fd      	b.n	800063c <__udivmoddi4+0x8c>
 8000840:	4543      	cmp	r3, r8
 8000842:	d2e5      	bcs.n	8000810 <__udivmoddi4+0x260>
 8000844:	ebb8 0e02 	subs.w	lr, r8, r2
 8000848:	eb69 0104 	sbc.w	r1, r9, r4
 800084c:	3801      	subs	r0, #1
 800084e:	e7df      	b.n	8000810 <__udivmoddi4+0x260>
 8000850:	4608      	mov	r0, r1
 8000852:	e7d2      	b.n	80007fa <__udivmoddi4+0x24a>
 8000854:	4660      	mov	r0, ip
 8000856:	e78d      	b.n	8000774 <__udivmoddi4+0x1c4>
 8000858:	4681      	mov	r9, r0
 800085a:	e7b9      	b.n	80007d0 <__udivmoddi4+0x220>
 800085c:	4666      	mov	r6, ip
 800085e:	e775      	b.n	800074c <__udivmoddi4+0x19c>
 8000860:	4630      	mov	r0, r6
 8000862:	e74a      	b.n	80006fa <__udivmoddi4+0x14a>
 8000864:	f1ac 0c02 	sub.w	ip, ip, #2
 8000868:	4439      	add	r1, r7
 800086a:	e713      	b.n	8000694 <__udivmoddi4+0xe4>
 800086c:	3802      	subs	r0, #2
 800086e:	443c      	add	r4, r7
 8000870:	e724      	b.n	80006bc <__udivmoddi4+0x10c>
 8000872:	bf00      	nop

08000874 <__aeabi_idiv0>:
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <ctoi>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// char to int
int ctoi(char c)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	3b30      	subs	r3, #48	; 0x30
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <selectChannel>:

uint8_t selectChannel()
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
	uint8_t rcvBuf;
	HAL_StatusTypeDef result;

	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER CHANNEL 1-16\r\n", 20, 10);
 800089a:	230a      	movs	r3, #10
 800089c:	2214      	movs	r2, #20
 800089e:	4925      	ldr	r1, [pc, #148]	; (8000934 <selectChannel+0xa0>)
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <selectChannel+0xa4>)
 80008a2:	f002 feba 	bl	800361a <HAL_UART_Transmit>
	uint8_t channelToSet = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
 80008aa:	1d79      	adds	r1, r7, #5
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	2201      	movs	r2, #1
 80008b2:	4821      	ldr	r0, [pc, #132]	; (8000938 <selectChannel+0xa4>)
 80008b4:	f002 ff43 	bl	800373e <HAL_UART_Receive>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71bb      	strb	r3, [r7, #6]
		if (result == HAL_OK)
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d129      	bne.n	8000916 <selectChannel+0x82>
		{
			if (rcvBuf >= '0' && rcvBuf <= '9')
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	2b2f      	cmp	r3, #47	; 0x2f
 80008c6:	d917      	bls.n	80008f8 <selectChannel+0x64>
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	2b39      	cmp	r3, #57	; 0x39
 80008cc:	d814      	bhi.n	80008f8 <selectChannel+0x64>
			{
				channelToSet = channelToSet * 10 + ctoi(rcvBuf);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	461a      	mov	r2, r3
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	b2dc      	uxtb	r4, r3
 80008da:	797b      	ldrb	r3, [r7, #5]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffcb 	bl	8000878 <ctoi>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4423      	add	r3, r4
 80008e8:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 1, 10);
 80008ea:	1d79      	adds	r1, r7, #5
 80008ec:	230a      	movs	r3, #10
 80008ee:	2201      	movs	r2, #1
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <selectChannel+0xa4>)
 80008f2:	f002 fe92 	bl	800361a <HAL_UART_Transmit>
 80008f6:	e00e      	b.n	8000916 <selectChannel+0x82>
			}
			else if (rcvBuf == '\r' && channelToSet > 0)
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	2b0d      	cmp	r3, #13
 80008fc:	d104      	bne.n	8000908 <selectChannel+0x74>
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <selectChannel+0x74>
			{
				return channelToSet;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	e010      	b.n	800092a <selectChannel+0x96>
			}
			else
			{
				HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
 8000908:	230a      	movs	r3, #10
 800090a:	2217      	movs	r2, #23
 800090c:	490b      	ldr	r1, [pc, #44]	; (800093c <selectChannel+0xa8>)
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <selectChannel+0xa4>)
 8000910:	f002 fe83 	bl	800361a <HAL_UART_Transmit>
				break;
 8000914:	e008      	b.n	8000928 <selectChannel+0x94>
			}
		}
		if (channelToSet > 16)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b10      	cmp	r3, #16
 800091a:	d9c6      	bls.n	80008aa <selectChannel+0x16>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <16\r\n", 19, 10);
 800091c:	230a      	movs	r3, #10
 800091e:	2213      	movs	r2, #19
 8000920:	4907      	ldr	r1, [pc, #28]	; (8000940 <selectChannel+0xac>)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <selectChannel+0xa4>)
 8000924:	f002 fe79 	bl	800361a <HAL_UART_Transmit>
			break;
		}
	}

	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	bf00      	nop
 8000934:	08003e08 	.word	0x08003e08
 8000938:	20000028 	.word	0x20000028
 800093c:	08003e20 	.word	0x08003e20
 8000940:	08003e38 	.word	0x08003e38

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b097      	sub	sp, #92	; 0x5c
 8000948:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 ff09 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 fa3d 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f000 faf1 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000956:	f000 fa97 	bl	8000e88 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800095a:	f000 fac3 	bl	8000ee4 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(10);
 800095e:	200a      	movs	r0, #10
 8000960:	f000 ff70 	bl	8001844 <HAL_Delay>

  if (pcaInit(hi2c1))
 8000964:	4cbf      	ldr	r4, [pc, #764]	; (8000c64 <main+0x320>)
 8000966:	4668      	mov	r0, sp
 8000968:	f104 0310 	add.w	r3, r4, #16
 800096c:	2244      	movs	r2, #68	; 0x44
 800096e:	4619      	mov	r1, r3
 8000970:	f003 f9e2 	bl	8003d38 <memcpy>
 8000974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000978:	f000 fbb8 	bl	80010ec <pcaInit>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <main+0x4c>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nINITIALIZATION SUCCEED\r\n", 28, 10);
 8000982:	230a      	movs	r3, #10
 8000984:	221c      	movs	r2, #28
 8000986:	49b8      	ldr	r1, [pc, #736]	; (8000c68 <main+0x324>)
 8000988:	48b8      	ldr	r0, [pc, #736]	; (8000c6c <main+0x328>)
 800098a:	f002 fe46 	bl	800361a <HAL_UART_Transmit>
 800098e:	e005      	b.n	800099c <main+0x58>
  else
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nINITIALIZATION FAILED\r\n", 27, 10);
 8000990:	230a      	movs	r3, #10
 8000992:	221b      	movs	r2, #27
 8000994:	49b6      	ldr	r1, [pc, #728]	; (8000c70 <main+0x32c>)
 8000996:	48b5      	ldr	r0, [pc, #724]	; (8000c6c <main+0x328>)
 8000998:	f002 fe3f 	bl	800361a <HAL_UART_Transmit>
  uint8_t rcvBuf;
  HAL_StatusTypeDef result;

  while (1)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nMENU:\r\n"
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	229f      	movs	r2, #159	; 0x9f
 80009a0:	49b4      	ldr	r1, [pc, #720]	; (8000c74 <main+0x330>)
 80009a2:	48b2      	ldr	r0, [pc, #712]	; (8000c6c <main+0x328>)
 80009a4:	f002 fe39 	bl	800361a <HAL_UART_Transmit>
			  "4. DISABLE SLEEP MODE\r\n"
			  "5. SET FREQUENCY\r\n"
			  "6. SET DUTY CYCLE\r\n"
			  "ENTER NUMBER 1 - 6\r\n", 159, 100);

	  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000000);
 80009a8:	4639      	mov	r1, r7
 80009aa:	4bb3      	ldr	r3, [pc, #716]	; (8000c78 <main+0x334>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	48af      	ldr	r0, [pc, #700]	; (8000c6c <main+0x328>)
 80009b0:	f002 fec5 	bl	800373e <HAL_UART_Receive>
 80009b4:	4603      	mov	r3, r0
 80009b6:	70bb      	strb	r3, [r7, #2]

	  if (result == HAL_OK)
 80009b8:	78bb      	ldrb	r3, [r7, #2]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1ee      	bne.n	800099c <main+0x58>
	  {
		  switch (rcvBuf)
 80009be:	783b      	ldrb	r3, [r7, #0]
 80009c0:	3b31      	subs	r3, #49	; 0x31
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	f200 81e5 	bhi.w	8000d92 <main+0x44e>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <main+0x8c>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e9 	.word	0x080009e9
 80009d4:	08000a55 	.word	0x08000a55
 80009d8:	08000ac1 	.word	0x08000ac1
 80009dc:	08000b2d 	.word	0x08000b2d
 80009e0:	08000b99 	.word	0x08000b99
 80009e4:	08000cbd 	.word	0x08000cbd
		  {
		  case '1':	// Enable all outputs
			  if (!pcaIsSleeping(hi2c1))
 80009e8:	4c9e      	ldr	r4, [pc, #632]	; (8000c64 <main+0x320>)
 80009ea:	4668      	mov	r0, sp
 80009ec:	f104 0310 	add.w	r3, r4, #16
 80009f0:	2244      	movs	r2, #68	; 0x44
 80009f2:	4619      	mov	r1, r3
 80009f4:	f003 f9a0 	bl	8003d38 <memcpy>
 80009f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009fc:	f000 fbf3 	bl	80011e6 <pcaIsSleeping>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f083 0301 	eor.w	r3, r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d01c      	beq.n	8000a46 <main+0x102>
			  {
				  if (pcaEnableAllOutputs(hi2c1))
 8000a0c:	4c95      	ldr	r4, [pc, #596]	; (8000c64 <main+0x320>)
 8000a0e:	4668      	mov	r0, sp
 8000a10:	f104 0310 	add.w	r3, r4, #16
 8000a14:	2244      	movs	r2, #68	; 0x44
 8000a16:	4619      	mov	r1, r3
 8000a18:	f003 f98e 	bl	8003d38 <memcpy>
 8000a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a20:	f000 fb9b 	bl	800115a <pcaEnableAllOutputs>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <main+0xf4>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL OUTPUTS ENABLED\r\n", 21, 10);
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2215      	movs	r2, #21
 8000a2e:	4993      	ldr	r1, [pc, #588]	; (8000c7c <main+0x338>)
 8000a30:	488e      	ldr	r0, [pc, #568]	; (8000c6c <main+0x328>)
 8000a32:	f002 fdf2 	bl	800361a <HAL_UART_Transmit>
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING ALL OUTPUTS\r\n", 29, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
			  break;
 8000a36:	e1b4      	b.n	8000da2 <main+0x45e>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING ALL OUTPUTS\r\n", 29, 10);
 8000a38:	230a      	movs	r3, #10
 8000a3a:	221d      	movs	r2, #29
 8000a3c:	4990      	ldr	r1, [pc, #576]	; (8000c80 <main+0x33c>)
 8000a3e:	488b      	ldr	r0, [pc, #556]	; (8000c6c <main+0x328>)
 8000a40:	f002 fdeb 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000a44:	e1ad      	b.n	8000da2 <main+0x45e>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
 8000a46:	230a      	movs	r3, #10
 8000a48:	221a      	movs	r2, #26
 8000a4a:	498e      	ldr	r1, [pc, #568]	; (8000c84 <main+0x340>)
 8000a4c:	4887      	ldr	r0, [pc, #540]	; (8000c6c <main+0x328>)
 8000a4e:	f002 fde4 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000a52:	e1a6      	b.n	8000da2 <main+0x45e>
		  case '2':	// Disable all outputs
			  if (!pcaIsSleeping(hi2c1))
 8000a54:	4c83      	ldr	r4, [pc, #524]	; (8000c64 <main+0x320>)
 8000a56:	4668      	mov	r0, sp
 8000a58:	f104 0310 	add.w	r3, r4, #16
 8000a5c:	2244      	movs	r2, #68	; 0x44
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f003 f96a 	bl	8003d38 <memcpy>
 8000a64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a68:	f000 fbbd 	bl	80011e6 <pcaIsSleeping>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f083 0301 	eor.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d01c      	beq.n	8000ab2 <main+0x16e>
			  {
				  if (pcaDisableAllOutputs(hi2c1))
 8000a78:	4c7a      	ldr	r4, [pc, #488]	; (8000c64 <main+0x320>)
 8000a7a:	4668      	mov	r0, sp
 8000a7c:	f104 0310 	add.w	r3, r4, #16
 8000a80:	2244      	movs	r2, #68	; 0x44
 8000a82:	4619      	mov	r1, r3
 8000a84:	f003 f958 	bl	8003d38 <memcpy>
 8000a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a8c:	f000 fb88 	bl	80011a0 <pcaDisableAllOutputs>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <main+0x160>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL OUTPUTS DISABLED\r\n", 22, 10);
 8000a96:	230a      	movs	r3, #10
 8000a98:	2216      	movs	r2, #22
 8000a9a:	497b      	ldr	r1, [pc, #492]	; (8000c88 <main+0x344>)
 8000a9c:	4873      	ldr	r0, [pc, #460]	; (8000c6c <main+0x328>)
 8000a9e:	f002 fdbc 	bl	800361a <HAL_UART_Transmit>
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING ALL OUTPUTS\r\n", 30, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
			  break;
 8000aa2:	e17e      	b.n	8000da2 <main+0x45e>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING ALL OUTPUTS\r\n", 30, 10);
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	221e      	movs	r2, #30
 8000aa8:	4978      	ldr	r1, [pc, #480]	; (8000c8c <main+0x348>)
 8000aaa:	4870      	ldr	r0, [pc, #448]	; (8000c6c <main+0x328>)
 8000aac:	f002 fdb5 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000ab0:	e177      	b.n	8000da2 <main+0x45e>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	221a      	movs	r2, #26
 8000ab6:	4973      	ldr	r1, [pc, #460]	; (8000c84 <main+0x340>)
 8000ab8:	486c      	ldr	r0, [pc, #432]	; (8000c6c <main+0x328>)
 8000aba:	f002 fdae 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000abe:	e170      	b.n	8000da2 <main+0x45e>
		  case '3':	// Enable sleep mode
			  if (!pcaIsSleeping(hi2c1))
 8000ac0:	4c68      	ldr	r4, [pc, #416]	; (8000c64 <main+0x320>)
 8000ac2:	4668      	mov	r0, sp
 8000ac4:	f104 0310 	add.w	r3, r4, #16
 8000ac8:	2244      	movs	r2, #68	; 0x44
 8000aca:	4619      	mov	r1, r3
 8000acc:	f003 f934 	bl	8003d38 <memcpy>
 8000ad0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ad4:	f000 fb87 	bl	80011e6 <pcaIsSleeping>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f083 0301 	eor.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d01c      	beq.n	8000b1e <main+0x1da>
			  {
				  if (pcaEnableSleepMode(hi2c1))
 8000ae4:	4c5f      	ldr	r4, [pc, #380]	; (8000c64 <main+0x320>)
 8000ae6:	4668      	mov	r0, sp
 8000ae8:	f104 0310 	add.w	r3, r4, #16
 8000aec:	2244      	movs	r2, #68	; 0x44
 8000aee:	4619      	mov	r1, r3
 8000af0:	f003 f922 	bl	8003d38 <memcpy>
 8000af4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000af8:	f000 fba7 	bl	800124a <pcaEnableSleepMode>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <main+0x1cc>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ENABLED\r\n", 21, 10);
 8000b02:	230a      	movs	r3, #10
 8000b04:	2215      	movs	r2, #21
 8000b06:	4962      	ldr	r1, [pc, #392]	; (8000c90 <main+0x34c>)
 8000b08:	4858      	ldr	r0, [pc, #352]	; (8000c6c <main+0x328>)
 8000b0a:	f002 fd86 	bl	800361a <HAL_UART_Transmit>
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING SLEEP MODE\r\n", 28, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY ENABLED\r\n", 29, 10);
			  break;
 8000b0e:	e148      	b.n	8000da2 <main+0x45e>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING SLEEP MODE\r\n", 28, 10);
 8000b10:	230a      	movs	r3, #10
 8000b12:	221c      	movs	r2, #28
 8000b14:	495f      	ldr	r1, [pc, #380]	; (8000c94 <main+0x350>)
 8000b16:	4855      	ldr	r0, [pc, #340]	; (8000c6c <main+0x328>)
 8000b18:	f002 fd7f 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000b1c:	e141      	b.n	8000da2 <main+0x45e>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY ENABLED\r\n", 29, 10);
 8000b1e:	230a      	movs	r3, #10
 8000b20:	221d      	movs	r2, #29
 8000b22:	495d      	ldr	r1, [pc, #372]	; (8000c98 <main+0x354>)
 8000b24:	4851      	ldr	r0, [pc, #324]	; (8000c6c <main+0x328>)
 8000b26:	f002 fd78 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000b2a:	e13a      	b.n	8000da2 <main+0x45e>
		  case '4':	// Disable sleep mode
			  if (!pcaIsSleeping(hi2c1))
 8000b2c:	4c4d      	ldr	r4, [pc, #308]	; (8000c64 <main+0x320>)
 8000b2e:	4668      	mov	r0, sp
 8000b30:	f104 0310 	add.w	r3, r4, #16
 8000b34:	2244      	movs	r2, #68	; 0x44
 8000b36:	4619      	mov	r1, r3
 8000b38:	f003 f8fe 	bl	8003d38 <memcpy>
 8000b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b40:	f000 fb51 	bl	80011e6 <pcaIsSleeping>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f083 0301 	eor.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01c      	beq.n	8000b8a <main+0x246>
			  {
				  if (pcaDisableSleepMode(hi2c1))
 8000b50:	4c44      	ldr	r4, [pc, #272]	; (8000c64 <main+0x320>)
 8000b52:	4668      	mov	r0, sp
 8000b54:	f104 0310 	add.w	r3, r4, #16
 8000b58:	2244      	movs	r2, #68	; 0x44
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f003 f8ec 	bl	8003d38 <memcpy>
 8000b60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b64:	f000 fbae 	bl	80012c4 <pcaDisableSleepMode>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <main+0x238>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE DISABLED\r\n", 22, 10);
 8000b6e:	230a      	movs	r3, #10
 8000b70:	2216      	movs	r2, #22
 8000b72:	494a      	ldr	r1, [pc, #296]	; (8000c9c <main+0x358>)
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <main+0x328>)
 8000b76:	f002 fd50 	bl	800361a <HAL_UART_Transmit>
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING SLEEP MODE\r\n", 29, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY DISABLED\r\n", 30, 10);
			  break;
 8000b7a:	e112      	b.n	8000da2 <main+0x45e>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING SLEEP MODE\r\n", 29, 10);
 8000b7c:	230a      	movs	r3, #10
 8000b7e:	221d      	movs	r2, #29
 8000b80:	4947      	ldr	r1, [pc, #284]	; (8000ca0 <main+0x35c>)
 8000b82:	483a      	ldr	r0, [pc, #232]	; (8000c6c <main+0x328>)
 8000b84:	f002 fd49 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000b88:	e10b      	b.n	8000da2 <main+0x45e>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY DISABLED\r\n", 30, 10);
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	221e      	movs	r2, #30
 8000b8e:	4945      	ldr	r1, [pc, #276]	; (8000ca4 <main+0x360>)
 8000b90:	4836      	ldr	r0, [pc, #216]	; (8000c6c <main+0x328>)
 8000b92:	f002 fd42 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000b96:	e104      	b.n	8000da2 <main+0x45e>
		  case '5':	// Set frequency
			  HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER NEW FREQUENCY 24 - 1 526\r\n", 36, 10);
 8000b98:	230a      	movs	r3, #10
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	4942      	ldr	r1, [pc, #264]	; (8000ca8 <main+0x364>)
 8000b9e:	4833      	ldr	r0, [pc, #204]	; (8000c6c <main+0x328>)
 8000ba0:	f002 fd3b 	bl	800361a <HAL_UART_Transmit>
			  uint32_t newFrequency = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
			  while (1)
			  {
				  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 10);
 8000ba8:	4639      	mov	r1, r7
 8000baa:	230a      	movs	r3, #10
 8000bac:	2201      	movs	r2, #1
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <main+0x328>)
 8000bb0:	f002 fdc5 	bl	800373e <HAL_UART_Receive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	70bb      	strb	r3, [r7, #2]
				  if (result == HAL_OK)
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d146      	bne.n	8000c4c <main+0x308>
				  {
					  if (rcvBuf >= '0' && rcvBuf <= '9')
 8000bbe:	783b      	ldrb	r3, [r7, #0]
 8000bc0:	2b2f      	cmp	r3, #47	; 0x2f
 8000bc2:	d916      	bls.n	8000bf2 <main+0x2ae>
 8000bc4:	783b      	ldrb	r3, [r7, #0]
 8000bc6:	2b39      	cmp	r3, #57	; 0x39
 8000bc8:	d813      	bhi.n	8000bf2 <main+0x2ae>
					  {
						  newFrequency = newFrequency * 10 + ctoi(rcvBuf);
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	783b      	ldrb	r3, [r7, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe4d 	bl	8000878 <ctoi>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4423      	add	r3, r4
 8000be2:	607b      	str	r3, [r7, #4]
						  HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 3, 10);
 8000be4:	4639      	mov	r1, r7
 8000be6:	230a      	movs	r3, #10
 8000be8:	2203      	movs	r2, #3
 8000bea:	4820      	ldr	r0, [pc, #128]	; (8000c6c <main+0x328>)
 8000bec:	f002 fd15 	bl	800361a <HAL_UART_Transmit>
 8000bf0:	e02c      	b.n	8000c4c <main+0x308>
					  }
					  else if (rcvBuf == '\r' && newFrequency >= 24)
 8000bf2:	783b      	ldrb	r3, [r7, #0]
 8000bf4:	2b0d      	cmp	r3, #13
 8000bf6:	d122      	bne.n	8000c3e <main+0x2fa>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b17      	cmp	r3, #23
 8000bfc:	d91f      	bls.n	8000c3e <main+0x2fa>
					  {
						  if (pcaSetFrequency(hi2c1, newFrequency))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4c18      	ldr	r4, [pc, #96]	; (8000c64 <main+0x320>)
 8000c04:	9311      	str	r3, [sp, #68]	; 0x44
 8000c06:	4668      	mov	r0, sp
 8000c08:	f104 0310 	add.w	r3, r4, #16
 8000c0c:	2244      	movs	r2, #68	; 0x44
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f003 f892 	bl	8003d38 <memcpy>
 8000c14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c18:	f000 fb92 	bl	8001340 <pcaSetFrequency>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <main+0x2ec>
						  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nFREQUENCY IS SET\r\n", 20, 10);
 8000c22:	230a      	movs	r3, #10
 8000c24:	2214      	movs	r2, #20
 8000c26:	4921      	ldr	r1, [pc, #132]	; (8000cac <main+0x368>)
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <main+0x328>)
 8000c2a:	f002 fcf6 	bl	800361a <HAL_UART_Transmit>
						  else
							  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nFAILED IN SETTING FREQUENCY\r\n", 31, 10);
						  break;
 8000c2e:	e018      	b.n	8000c62 <main+0x31e>
							  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nFAILED IN SETTING FREQUENCY\r\n", 31, 10);
 8000c30:	230a      	movs	r3, #10
 8000c32:	221f      	movs	r2, #31
 8000c34:	491e      	ldr	r1, [pc, #120]	; (8000cb0 <main+0x36c>)
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <main+0x328>)
 8000c38:	f002 fcef 	bl	800361a <HAL_UART_Transmit>
						  break;
 8000c3c:	e011      	b.n	8000c62 <main+0x31e>
					  }
					  else
					  {
						  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
 8000c3e:	230a      	movs	r3, #10
 8000c40:	2217      	movs	r2, #23
 8000c42:	491c      	ldr	r1, [pc, #112]	; (8000cb4 <main+0x370>)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <main+0x328>)
 8000c46:	f002 fce8 	bl	800361a <HAL_UART_Transmit>
						  break;
 8000c4a:	e00a      	b.n	8000c62 <main+0x31e>
					  }
				  }
				  if (newFrequency > 1526)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d9a8      	bls.n	8000ba8 <main+0x264>
				  {
					  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <1 526\r\n", 26, 10);
 8000c56:	230a      	movs	r3, #10
 8000c58:	221a      	movs	r2, #26
 8000c5a:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <main+0x374>)
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <main+0x328>)
 8000c5e:	f002 fcdc 	bl	800361a <HAL_UART_Transmit>
					  break;
				  }
			  }
			  break;
 8000c62:	e09e      	b.n	8000da2 <main+0x45e>
 8000c64:	2000006c 	.word	0x2000006c
 8000c68:	08003e4c 	.word	0x08003e4c
 8000c6c:	20000028 	.word	0x20000028
 8000c70:	08003e68 	.word	0x08003e68
 8000c74:	08003e84 	.word	0x08003e84
 8000c78:	000f4240 	.word	0x000f4240
 8000c7c:	08003f24 	.word	0x08003f24
 8000c80:	08003f3c 	.word	0x08003f3c
 8000c84:	08003f5c 	.word	0x08003f5c
 8000c88:	08003f78 	.word	0x08003f78
 8000c8c:	08003f90 	.word	0x08003f90
 8000c90:	08003fb0 	.word	0x08003fb0
 8000c94:	08003fc8 	.word	0x08003fc8
 8000c98:	08003fe8 	.word	0x08003fe8
 8000c9c:	08004008 	.word	0x08004008
 8000ca0:	08004020 	.word	0x08004020
 8000ca4:	08004040 	.word	0x08004040
 8000ca8:	08004060 	.word	0x08004060
 8000cac:	08004084 	.word	0x08004084
 8000cb0:	0800409c 	.word	0x0800409c
 8000cb4:	08003e20 	.word	0x08003e20
 8000cb8:	080040bc 	.word	0x080040bc
		  case '6':;	// Set duty cycle to channel
			  uint8_t channelToSet = selectChannel();
 8000cbc:	f7ff fdea 	bl	8000894 <selectChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	707b      	strb	r3, [r7, #1]
			  if (channelToSet != 0)
 8000cc4:	787b      	ldrb	r3, [r7, #1]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d06a      	beq.n	8000da0 <main+0x45c>
			  {
				  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nENTER NEW DUTY CYCLE 0 - 100\r\n", 32, 10);
 8000cca:	230a      	movs	r3, #10
 8000ccc:	2220      	movs	r2, #32
 8000cce:	4937      	ldr	r1, [pc, #220]	; (8000dac <main+0x468>)
 8000cd0:	4837      	ldr	r0, [pc, #220]	; (8000db0 <main+0x46c>)
 8000cd2:	f002 fca2 	bl	800361a <HAL_UART_Transmit>
				  uint8_t newDutyCycle = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	70fb      	strb	r3, [r7, #3]
				  while (1)
				  {
					  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
 8000cda:	4639      	mov	r1, r7
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4833      	ldr	r0, [pc, #204]	; (8000db0 <main+0x46c>)
 8000ce4:	f002 fd2b 	bl	800373e <HAL_UART_Receive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	70bb      	strb	r3, [r7, #2]
					  if (result == HAL_OK)
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d145      	bne.n	8000d7e <main+0x43a>
					  {
						  if (rcvBuf >= '0' && rcvBuf <= '9')
 8000cf2:	783b      	ldrb	r3, [r7, #0]
 8000cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8000cf6:	d917      	bls.n	8000d28 <main+0x3e4>
 8000cf8:	783b      	ldrb	r3, [r7, #0]
 8000cfa:	2b39      	cmp	r3, #57	; 0x39
 8000cfc:	d814      	bhi.n	8000d28 <main+0x3e4>
						  {
							  newDutyCycle = newDutyCycle * 10 + ctoi(rcvBuf);
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	461a      	mov	r2, r3
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	b2dc      	uxtb	r4, r3
 8000d0a:	783b      	ldrb	r3, [r7, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fdb3 	bl	8000878 <ctoi>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4423      	add	r3, r4
 8000d18:	70fb      	strb	r3, [r7, #3]
							  HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 1, 10);
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4823      	ldr	r0, [pc, #140]	; (8000db0 <main+0x46c>)
 8000d22:	f002 fc7a 	bl	800361a <HAL_UART_Transmit>
 8000d26:	e02a      	b.n	8000d7e <main+0x43a>
						  }
						  else if (rcvBuf == '\r' && newDutyCycle >= 0)
 8000d28:	783b      	ldrb	r3, [r7, #0]
 8000d2a:	2b0d      	cmp	r3, #13
 8000d2c:	d120      	bne.n	8000d70 <main+0x42c>
						  {
							  if (pcaSetDutyCycle(hi2c1, channelToSet, newDutyCycle))
 8000d2e:	4c21      	ldr	r4, [pc, #132]	; (8000db4 <main+0x470>)
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	9312      	str	r3, [sp, #72]	; 0x48
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	9311      	str	r3, [sp, #68]	; 0x44
 8000d38:	4668      	mov	r0, sp
 8000d3a:	f104 0310 	add.w	r3, r4, #16
 8000d3e:	2244      	movs	r2, #68	; 0x44
 8000d40:	4619      	mov	r1, r3
 8000d42:	f002 fff9 	bl	8003d38 <memcpy>
 8000d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d4a:	f000 fb71 	bl	8001430 <pcaSetDutyCycle>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <main+0x41e>
								  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nDUTY CYCLE IS SET\r\n", 21, 10);
 8000d54:	230a      	movs	r3, #10
 8000d56:	2215      	movs	r2, #21
 8000d58:	4917      	ldr	r1, [pc, #92]	; (8000db8 <main+0x474>)
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <main+0x46c>)
 8000d5c:	f002 fc5d 	bl	800361a <HAL_UART_Transmit>
							  else
								  HAL_UART_Transmit(&huart3,
										  (uint8_t *)"\r\nFAILED IN SETTING DUTY CYCLE\r\n", 32, 10);
							  break;
 8000d60:	e016      	b.n	8000d90 <main+0x44c>
								  HAL_UART_Transmit(&huart3,
 8000d62:	230a      	movs	r3, #10
 8000d64:	2220      	movs	r2, #32
 8000d66:	4915      	ldr	r1, [pc, #84]	; (8000dbc <main+0x478>)
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <main+0x46c>)
 8000d6a:	f002 fc56 	bl	800361a <HAL_UART_Transmit>
							  break;
 8000d6e:	e00f      	b.n	8000d90 <main+0x44c>
						  }
						  else
						  {
							  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
 8000d70:	230a      	movs	r3, #10
 8000d72:	2217      	movs	r2, #23
 8000d74:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <main+0x47c>)
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <main+0x46c>)
 8000d78:	f002 fc4f 	bl	800361a <HAL_UART_Transmit>
							  break;
 8000d7c:	e008      	b.n	8000d90 <main+0x44c>
						  }
					  }
					  if (newDutyCycle > 100)
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b64      	cmp	r3, #100	; 0x64
 8000d82:	d9aa      	bls.n	8000cda <main+0x396>
					  {
						  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <100\r\n", 20, 10);
 8000d84:	230a      	movs	r3, #10
 8000d86:	2214      	movs	r2, #20
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <main+0x480>)
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <main+0x46c>)
 8000d8c:	f002 fc45 	bl	800361a <HAL_UART_Transmit>
						  break;
					  }
				  }
			  }
			  break;
 8000d90:	e006      	b.n	8000da0 <main+0x45c>
		  default:
			  HAL_UART_Transmit(&huart3, (uint8_t *)"WRONG KEY\r\n", 11, 10);
 8000d92:	230a      	movs	r3, #10
 8000d94:	220b      	movs	r2, #11
 8000d96:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <main+0x484>)
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <main+0x46c>)
 8000d9a:	f002 fc3e 	bl	800361a <HAL_UART_Transmit>
			  break;
 8000d9e:	e000      	b.n	8000da2 <main+0x45e>
			  break;
 8000da0:	bf00      	nop
		  }
		  HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f000 fd4d 	bl	8001844 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nMENU:\r\n"
 8000daa:	e5f7      	b.n	800099c <main+0x58>
 8000dac:	080040d4 	.word	0x080040d4
 8000db0:	20000028 	.word	0x20000028
 8000db4:	2000006c 	.word	0x2000006c
 8000db8:	080040f8 	.word	0x080040f8
 8000dbc:	08004110 	.word	0x08004110
 8000dc0:	08003e20 	.word	0x08003e20
 8000dc4:	08004134 	.word	0x08004134
 8000dc8:	0800414c 	.word	0x0800414c

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	; 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2230      	movs	r2, #48	; 0x30
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 ffba 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemClock_Config+0xb4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <SystemClock_Config+0xb4>)
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemClock_Config+0xb4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2310      	movs	r3, #16
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff57 	bl	8002cf0 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e48:	f000 f8b8 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 f9ba 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e72:	f000 f8a3 	bl	8000fbc <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	; 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_I2C1_Init+0x54>)
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <MX_I2C1_Init+0x58>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_I2C1_Init+0x54>)
 8000e94:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e98:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_I2C1_Init+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_I2C1_Init+0x54>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_I2C1_Init+0x54>)
 8000ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_I2C1_Init+0x54>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_I2C1_Init+0x54>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_I2C1_Init+0x54>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_I2C1_Init+0x54>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_I2C1_Init+0x54>)
 8000ec8:	f000 ff7c 	bl	8001dc4 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000ed2:	f000 f873 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000006c 	.word	0x2000006c
 8000ee0:	40005400 	.word	0x40005400

08000ee4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART3_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART3_UART_Init+0x4c>)
 8000f1c:	f002 fb30 	bl	8003580 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f849 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000028 	.word	0x20000028
 8000f34:	40004800 	.word	0x40004800

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_GPIO_Init+0x7c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0x80>)
 8000f8c:	f000 ff00 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0x80>)
 8000fa8:	f000 fd56 	bl	8001a58 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>

08000fc6 <setRegister>:
#define WAITTIME 100

const uint8_t mode1InitValue = 0x01;

static bool setRegister(I2C_HandleTypeDef hi2c, uint8_t adress, uint8_t value)
{
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	f107 0c10 	add.w	ip, r7, #16
 8000fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t fullData[2] = {adress, value};
 8000fd6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000fda:	713b      	strb	r3, [r7, #4]
 8000fdc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000fe0:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Master_Transmit(&hi2c, ADRESS, (uint8_t *)&fullData, 2, WAITTIME) == HAL_OK;
 8000fe2:	1d3a      	adds	r2, r7, #4
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	f107 0010 	add.w	r0, r7, #16
 8000ff0:	f001 f82c 	bl	800204c <HAL_I2C_Master_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2301      	moveq	r3, #1
 8000ffc:	2300      	movne	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100a:	b004      	add	sp, #16
 800100c:	4770      	bx	lr

0800100e <readRegister>:

static bool readRegister(I2C_HandleTypeDef hi2c, uint8_t adress, uint8_t *save)
{
 800100e:	b084      	sub	sp, #16
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
 8001016:	f107 0c10 	add.w	ip, r7, #16
 800101a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Master_Transmit(&hi2c, ADRESS, (uint8_t *)&adress, 1, WAITTIME);
 800101e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	f107 0010 	add.w	r0, r7, #16
 800102e:	f001 f80d 	bl	800204c <HAL_I2C_Master_Transmit>
	uint8_t result = HAL_I2C_Master_Receive(&hi2c, ADRESS, (uint8_t *)save, 1, WAITTIME) == HAL_OK;
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	f107 0010 	add.w	r0, r7, #16
 8001040:	f001 f902 	bl	8002248 <HAL_I2C_Master_Receive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf0c      	ite	eq
 800104a:	2301      	moveq	r3, #1
 800104c:	2300      	movne	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	71fb      	strb	r3, [r7, #7]
	return result;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr

0800106c <setPin>:

static bool setPin(I2C_HandleTypeDef hi2c, uint8_t adress, uint8_t *data4Elements)
{
 800106c:	b084      	sub	sp, #16
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af02      	add	r7, sp, #8
 8001074:	f107 0c18 	add.w	ip, r7, #24
 8001078:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool result = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
	uint8_t fullData[2] = {adress};
 8001080:	2300      	movs	r3, #0
 8001082:	80bb      	strh	r3, [r7, #4]
 8001084:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001088:	713b      	strb	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	e022      	b.n	80010d6 <setPin+0x6a>
	{
		fullData[1] = data4Elements[i];
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	717b      	strb	r3, [r7, #5]
		result &= HAL_I2C_Master_Transmit(&hi2c, ADRESS, (uint8_t *)&fullData, 2, WAITTIME) == HAL_OK;
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2302      	movs	r3, #2
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	f107 0018 	add.w	r0, r7, #24
 80010a8:	f000 ffd0 	bl	800204c <HAL_I2C_Master_Transmit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
		fullData[0] += 1;
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	713b      	strb	r3, [r7, #4]
	for (int i = 0; i < 4; i++)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	ddd9      	ble.n	8001090 <setPin+0x24>
	}
	return result;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010e8:	b004      	add	sp, #16
 80010ea:	4770      	bx	lr

080010ec <pcaInit>:

bool pcaInit(I2C_HandleTypeDef hi2c)
{
 80010ec:	b084      	sub	sp, #16
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b096      	sub	sp, #88	; 0x58
 80010f2:	af14      	add	r7, sp, #80	; 0x50
 80010f4:	f107 0c10 	add.w	ip, r7, #16
 80010f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool result = setRegister(hi2c, 0x00, mode1InitValue);
 80010fc:	2301      	movs	r3, #1
 80010fe:	9312      	str	r3, [sp, #72]	; 0x48
 8001100:	2300      	movs	r3, #0
 8001102:	9311      	str	r3, [sp, #68]	; 0x44
 8001104:	4668      	mov	r0, sp
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	2244      	movs	r2, #68	; 0x44
 800110c:	4619      	mov	r1, r3
 800110e:	f002 fe13 	bl	8003d38 <memcpy>
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001118:	f7ff ff55 	bl	8000fc6 <setRegister>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
	result &= pcaDisableAllOutputs(hi2c);
 8001120:	4668      	mov	r0, sp
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2244      	movs	r2, #68	; 0x44
 8001128:	4619      	mov	r1, r3
 800112a:	f002 fe05 	bl	8003d38 <memcpy>
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001134:	f000 f834 	bl	80011a0 <pcaDisableAllOutputs>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
	return result;
 800114a:	79fb      	ldrb	r3, [r7, #7]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001156:	b004      	add	sp, #16
 8001158:	4770      	bx	lr

0800115a <pcaEnableAllOutputs>:

bool pcaEnableAllOutputs(I2C_HandleTypeDef hi2c)
{
 800115a:	b084      	sub	sp, #16
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af14      	add	r7, sp, #80	; 0x50
 8001162:	f107 0c10 	add.w	ip, r7, #16
 8001166:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data4Elements[4] = {0x00, 0x10, 0x00, 0x00};
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	607b      	str	r3, [r7, #4]
	return setPin(hi2c, 0xfa, data4Elements);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	9312      	str	r3, [sp, #72]	; 0x48
 8001174:	23fa      	movs	r3, #250	; 0xfa
 8001176:	9311      	str	r3, [sp, #68]	; 0x44
 8001178:	4668      	mov	r0, sp
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2244      	movs	r2, #68	; 0x44
 8001180:	4619      	mov	r1, r3
 8001182:	f002 fdd9 	bl	8003d38 <memcpy>
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118c:	f7ff ff6e 	bl	800106c <setPin>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <pcaDisableAllOutputs>:

bool pcaDisableAllOutputs(I2C_HandleTypeDef hi2c)
{
 80011a0:	b084      	sub	sp, #16
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b096      	sub	sp, #88	; 0x58
 80011a6:	af14      	add	r7, sp, #80	; 0x50
 80011a8:	f107 0c10 	add.w	ip, r7, #16
 80011ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data4Elements[4] = {0x00, 0x00, 0x00, 0x10};
 80011b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011b4:	607b      	str	r3, [r7, #4]
	return setPin(hi2c, 0xfa, data4Elements);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	9312      	str	r3, [sp, #72]	; 0x48
 80011ba:	23fa      	movs	r3, #250	; 0xfa
 80011bc:	9311      	str	r3, [sp, #68]	; 0x44
 80011be:	4668      	mov	r0, sp
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	2244      	movs	r2, #68	; 0x44
 80011c6:	4619      	mov	r1, r3
 80011c8:	f002 fdb6 	bl	8003d38 <memcpy>
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d2:	f7ff ff4b 	bl	800106c <setPin>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011e2:	b004      	add	sp, #16
 80011e4:	4770      	bx	lr

080011e6 <pcaIsSleeping>:

bool pcaIsSleeping(I2C_HandleTypeDef hi2c)
{
 80011e6:	b084      	sub	sp, #16
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	af14      	add	r7, sp, #80	; 0x50
 80011ee:	f107 0c10 	add.w	ip, r7, #16
 80011f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t sleeping;
	if (!readRegister(hi2c, 0x00, &sleeping))
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9312      	str	r3, [sp, #72]	; 0x48
 80011fa:	2300      	movs	r3, #0
 80011fc:	9311      	str	r3, [sp, #68]	; 0x44
 80011fe:	4668      	mov	r0, sp
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	2244      	movs	r2, #68	; 0x44
 8001206:	4619      	mov	r1, r3
 8001208:	f002 fd96 	bl	8003d38 <memcpy>
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001212:	f7ff fefc 	bl	800100e <readRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	f083 0301 	eor.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <pcaIsSleeping+0x40>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e00a      	b.n	800123c <pcaIsSleeping+0x56>
	sleeping &= 0b00010000; // sleeping bit
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	b2db      	uxtb	r3, r3
 800122e:	71fb      	strb	r3, [r7, #7]
	return sleeping;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001246:	b004      	add	sp, #16
 8001248:	4770      	bx	lr

0800124a <pcaEnableSleepMode>:

bool pcaEnableSleepMode(I2C_HandleTypeDef hi2c)
{
 800124a:	b084      	sub	sp, #16
 800124c:	b580      	push	{r7, lr}
 800124e:	b096      	sub	sp, #88	; 0x58
 8001250:	af14      	add	r7, sp, #80	; 0x50
 8001252:	f107 0c10 	add.w	ip, r7, #16
 8001256:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t register0;
	if (!readRegister(hi2c, 0x00, &register0))
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	9312      	str	r3, [sp, #72]	; 0x48
 800125e:	2300      	movs	r3, #0
 8001260:	9311      	str	r3, [sp, #68]	; 0x44
 8001262:	4668      	mov	r0, sp
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	2244      	movs	r2, #68	; 0x44
 800126a:	4619      	mov	r1, r3
 800126c:	f002 fd64 	bl	8003d38 <memcpy>
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001276:	f7ff feca 	bl	800100e <readRegister>
 800127a:	4603      	mov	r3, r0
 800127c:	f083 0301 	eor.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <pcaEnableSleepMode+0x40>
	{
		return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e015      	b.n	80012b6 <pcaEnableSleepMode+0x6c>
	}
	register0 |= 0b00010000; // sleep bit
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f043 0310 	orr.w	r3, r3, #16
 8001290:	b2db      	uxtb	r3, r3
 8001292:	71fb      	strb	r3, [r7, #7]
	return setRegister(hi2c, 0x00, register0);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	9312      	str	r3, [sp, #72]	; 0x48
 8001298:	2300      	movs	r3, #0
 800129a:	9311      	str	r3, [sp, #68]	; 0x44
 800129c:	4668      	mov	r0, sp
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2244      	movs	r2, #68	; 0x44
 80012a4:	4619      	mov	r1, r3
 80012a6:	f002 fd47 	bl	8003d38 <memcpy>
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	f7ff fe89 	bl	8000fc6 <setRegister>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012c0:	b004      	add	sp, #16
 80012c2:	4770      	bx	lr

080012c4 <pcaDisableSleepMode>:

bool pcaDisableSleepMode(I2C_HandleTypeDef hi2c)
{
 80012c4:	b084      	sub	sp, #16
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b096      	sub	sp, #88	; 0x58
 80012ca:	af14      	add	r7, sp, #80	; 0x50
 80012cc:	f107 0c10 	add.w	ip, r7, #16
 80012d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t register0;
	if (!readRegister(hi2c, 0x00, &register0))
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	9312      	str	r3, [sp, #72]	; 0x48
 80012d8:	2300      	movs	r3, #0
 80012da:	9311      	str	r3, [sp, #68]	; 0x44
 80012dc:	4668      	mov	r0, sp
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2244      	movs	r2, #68	; 0x44
 80012e4:	4619      	mov	r1, r3
 80012e6:	f002 fd27 	bl	8003d38 <memcpy>
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f0:	f7ff fe8d 	bl	800100e <readRegister>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <pcaDisableSleepMode+0x40>
	{
		return 0;
 8001300:	2300      	movs	r3, #0
 8001302:	e015      	b.n	8001330 <pcaDisableSleepMode+0x6c>
	}
	register0 &= 0b11101111; // sleep bit
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f023 0310 	bic.w	r3, r3, #16
 800130a:	b2db      	uxtb	r3, r3
 800130c:	71fb      	strb	r3, [r7, #7]
	return setRegister(hi2c, 0x00, register0);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	9312      	str	r3, [sp, #72]	; 0x48
 8001312:	2300      	movs	r3, #0
 8001314:	9311      	str	r3, [sp, #68]	; 0x44
 8001316:	4668      	mov	r0, sp
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	2244      	movs	r2, #68	; 0x44
 800131e:	4619      	mov	r1, r3
 8001320:	f002 fd0a 	bl	8003d38 <memcpy>
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132a:	f7ff fe4c 	bl	8000fc6 <setRegister>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133a:	b004      	add	sp, #16
 800133c:	4770      	bx	lr
	...

08001340 <pcaSetFrequency>:

bool pcaSetFrequency(I2C_HandleTypeDef hi2c, uint16_t newFrequency)
{
 8001340:	b084      	sub	sp, #16
 8001342:	b580      	push	{r7, lr}
 8001344:	b096      	sub	sp, #88	; 0x58
 8001346:	af14      	add	r7, sp, #80	; 0x50
 8001348:	f107 0c10 	add.w	ip, r7, #16
 800134c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t prescale = round(25000000 / (4096 * newFrequency)) - 1;
 8001350:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001354:	031b      	lsls	r3, r3, #12
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <pcaSetFrequency+0xe8>)
 8001358:	fb92 f3f3 	sdiv	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f885 	bl	800046c <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <pcaSetFrequency+0xec>)
 8001368:	f7fe ff32 	bl	80001d0 <__aeabi_dsub>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff f8e4 	bl	8000540 <__aeabi_d2uiz>
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]

	if (!pcaIsSleeping(hi2c))
 800137c:	4668      	mov	r0, sp
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2244      	movs	r2, #68	; 0x44
 8001384:	4619      	mov	r1, r3
 8001386:	f002 fcd7 	bl	8003d38 <memcpy>
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001390:	f7ff ff29 	bl	80011e6 <pcaIsSleeping>
 8001394:	4603      	mov	r3, r0
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d02b      	beq.n	80013f8 <pcaSetFrequency+0xb8>
 	{
		pcaEnableSleepMode(hi2c);
 80013a0:	4668      	mov	r0, sp
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2244      	movs	r2, #68	; 0x44
 80013a8:	4619      	mov	r1, r3
 80013aa:	f002 fcc5 	bl	8003d38 <memcpy>
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b4:	f7ff ff49 	bl	800124a <pcaEnableSleepMode>
		bool result = setRegister(hi2c, 0xfe, prescale);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	9312      	str	r3, [sp, #72]	; 0x48
 80013bc:	23fe      	movs	r3, #254	; 0xfe
 80013be:	9311      	str	r3, [sp, #68]	; 0x44
 80013c0:	4668      	mov	r0, sp
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2244      	movs	r2, #68	; 0x44
 80013c8:	4619      	mov	r1, r3
 80013ca:	f002 fcb5 	bl	8003d38 <memcpy>
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	f7ff fdf7 	bl	8000fc6 <setRegister>
 80013d8:	4603      	mov	r3, r0
 80013da:	71bb      	strb	r3, [r7, #6]
		pcaDisableSleepMode(hi2c);
 80013dc:	4668      	mov	r0, sp
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2244      	movs	r2, #68	; 0x44
 80013e4:	4619      	mov	r1, r3
 80013e6:	f002 fca7 	bl	8003d38 <memcpy>
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	f7ff ff68 	bl	80012c4 <pcaDisableSleepMode>
		return result;
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	e010      	b.n	800141a <pcaSetFrequency+0xda>
	}
	return setRegister(hi2c, 0xfe, prescale);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	9312      	str	r3, [sp, #72]	; 0x48
 80013fc:	23fe      	movs	r3, #254	; 0xfe
 80013fe:	9311      	str	r3, [sp, #68]	; 0x44
 8001400:	4668      	mov	r0, sp
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2244      	movs	r2, #68	; 0x44
 8001408:	4619      	mov	r1, r3
 800140a:	f002 fc95 	bl	8003d38 <memcpy>
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001414:	f7ff fdd7 	bl	8000fc6 <setRegister>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001424:	b004      	add	sp, #16
 8001426:	4770      	bx	lr
 8001428:	017d7840 	.word	0x017d7840
 800142c:	3ff00000 	.word	0x3ff00000

08001430 <pcaSetDutyCycle>:

bool pcaSetDutyCycle(I2C_HandleTypeDef hi2c, uint8_t channel, uint8_t newDutyCycle)
{
 8001430:	b084      	sub	sp, #16
 8001432:	b580      	push	{r7, lr}
 8001434:	b098      	sub	sp, #96	; 0x60
 8001436:	af14      	add	r7, sp, #80	; 0x50
 8001438:	f107 0c18 	add.w	ip, r7, #24
 800143c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (channel >= 1 && channel <= 16)
 8001440:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001444:	2b00      	cmp	r3, #0
 8001446:	d061      	beq.n	800150c <pcaSetDutyCycle+0xdc>
 8001448:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800144c:	2b10      	cmp	r3, #16
 800144e:	d85d      	bhi.n	800150c <pcaSetDutyCycle+0xdc>
	{
		if (newDutyCycle <= 100 && newDutyCycle >= 0)
 8001450:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	d859      	bhi.n	800150c <pcaSetDutyCycle+0xdc>
		{
			uint16_t setOn = newDutyCycle == 100 ? 4096 : 0;
 8001458:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d102      	bne.n	8001466 <pcaSetDutyCycle+0x36>
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	e000      	b.n	8001468 <pcaSetDutyCycle+0x38>
 8001466:	2300      	movs	r3, #0
 8001468:	81fb      	strh	r3, [r7, #14]
			uint16_t setOff = newDutyCycle == 100 ? 0 : round(((float)newDutyCycle / 100) * 4096);
 800146a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d020      	beq.n	80014b4 <pcaSetDutyCycle+0x84>
 8001472:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147e:	eddf 6a27 	vldr	s13, [pc, #156]	; 800151c <pcaSetDutyCycle+0xec>
 8001482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001486:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001520 <pcaSetDutyCycle+0xf0>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	ee17 0a90 	vmov	r0, s15
 8001492:	f7fe fffd 	bl	8000490 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ec43 2b10 	vmov	d0, r2, r3
 800149e:	f002 fc61 	bl	8003d64 <round>
 80014a2:	ec53 2b10 	vmov	r2, r3, d0
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff f849 	bl	8000540 <__aeabi_d2uiz>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	e000      	b.n	80014b6 <pcaSetDutyCycle+0x86>
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]

			uint8_t finalChannel = 0x06 + ((channel - 1) * 4);
 80014b8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80014bc:	3b01      	subs	r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3306      	adds	r3, #6
 80014c6:	72fb      	strb	r3, [r7, #11]
			uint8_t data4Elements[4] = {setOn, setOn >> 8u, setOff, setOff >> 8u};
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	713b      	strb	r3, [r7, #4]
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	717b      	strb	r3, [r7, #5]
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	89bb      	ldrh	r3, [r7, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	71fb      	strb	r3, [r7, #7]
			return setPin(hi2c, finalChannel, data4Elements);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	9312      	str	r3, [sp, #72]	; 0x48
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	9311      	str	r3, [sp, #68]	; 0x44
 80014f0:	4668      	mov	r0, sp
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	2244      	movs	r2, #68	; 0x44
 80014f8:	4619      	mov	r1, r3
 80014fa:	f002 fc1d 	bl	8003d38 <memcpy>
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001504:	f7ff fdb2 	bl	800106c <setPin>
 8001508:	4603      	mov	r3, r0
 800150a:	e000      	b.n	800150e <pcaSetDutyCycle+0xde>
		}
	}
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001518:	b004      	add	sp, #16
 800151a:	4770      	bx	lr
 800151c:	42c80000 	.word	0x42c80000
 8001520:	45800000 	.word	0x45800000

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_I2C_MspInit+0x84>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_I2C_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80015b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c4:	2304      	movs	r3, #4
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <HAL_I2C_MspInit+0x8c>)
 80015d0:	f000 fa42 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020400 	.word	0x40020400

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x84>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12c      	bne.n	8001680 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_UART_MspInit+0x88>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_UART_MspInit+0x88>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_UART_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800165e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001670:	2307      	movs	r3, #7
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_UART_MspInit+0x8c>)
 800167c:	f000 f9ec 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40004800 	.word	0x40004800
 800168c:	40023800 	.word	0x40023800
 8001690:	40020c00 	.word	0x40020c00

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f890 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001728:	4c0b      	ldr	r4, [pc, #44]	; (8001758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001736:	f7ff ffd7 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f002 fad9 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff f901 	bl	8000944 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001750:	08004180 	.word	0x08004180
  ldr r2, =_sbss
 8001754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001758:	200000c4 	.word	0x200000c4

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_Init+0x40>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_Init+0x40>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_Init+0x40>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 f931 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	200f      	movs	r0, #15
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fec6 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f93b 	bl	8001a3e <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e0:	f000 f911 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008
 8001828:	200000c0 	.word	0x200000c0

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200000c0 	.word	0x200000c0

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff47 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff5c 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb0 	bl	80019ac <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e16b      	b.n	8001d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 815a 	bne.w	8001d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80b4 	beq.w	8001d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x314>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x318>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	; (8001d88 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x20a>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c62:	2308      	movs	r3, #8
 8001c64:	e00c      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00a      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc2:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f ae90 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e12b      	b.n	800202e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fbc2 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e28:	f001 fb82 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a81      	ldr	r2, [pc, #516]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d807      	bhi.n	8001e48 <HAL_I2C_Init+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a80      	ldr	r2, [pc, #512]	; (800203c <HAL_I2C_Init+0x278>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e006      	b.n	8001e56 <HAL_I2C_Init+0x92>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a7d      	ldr	r2, [pc, #500]	; (8002040 <HAL_I2C_Init+0x27c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0e7      	b.n	800202e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a78      	ldr	r2, [pc, #480]	; (8002044 <HAL_I2C_Init+0x280>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d802      	bhi.n	8001e98 <HAL_I2C_Init+0xd4>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	e009      	b.n	8001eac <HAL_I2C_Init+0xe8>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <HAL_I2C_Init+0x284>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	3301      	adds	r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	495c      	ldr	r1, [pc, #368]	; (8002038 <HAL_I2C_Init+0x274>)
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d819      	bhi.n	8001f00 <HAL_I2C_Init+0x13c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_I2C_Init+0x138>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e59      	subs	r1, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	e051      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e04f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_I2C_Init+0x168>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e012      	b.n	8001f52 <HAL_I2C_Init+0x18e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e58      	subs	r0, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	0099      	lsls	r1, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Init+0x196>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e022      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <HAL_I2C_Init+0x1bc>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e58      	subs	r0, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	440b      	add	r3, r1
 8001f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	6809      	ldr	r1, [r1, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6911      	ldr	r1, [r2, #16]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	000186a0 	.word	0x000186a0
 800203c:	001e847f 	.word	0x001e847f
 8002040:	003d08ff 	.word	0x003d08ff
 8002044:	431bde83 	.word	0x431bde83
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fbe4 	bl	800182c <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 80e0 	bne.w	8002234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	4970      	ldr	r1, [pc, #448]	; (8002240 <HAL_I2C_Master_Transmit+0x1f4>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fc58 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e0d3      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2C_Master_Transmit+0x50>
 8002098:	2302      	movs	r3, #2
 800209a:	e0cc      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d007      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_I2C_Master_Transmit+0x1f8>)
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fac2 	bl	8002694 <I2C_MasterRequestWrite>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e08d      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002130:	e066      	b.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fcd2 	bl	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b04      	cmp	r3, #4
 8002148:	d107      	bne.n	800215a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06b      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d017      	beq.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fcc2 	bl	8002b62 <I2C_WaitOnBTFFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d107      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e01a      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d194      	bne.n	8002132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
  }
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00100002 	.word	0x00100002
 8002244:	ffff0000 	.word	0xffff0000

08002248 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	460b      	mov	r3, r1
 8002256:	817b      	strh	r3, [r7, #10]
 8002258:	4613      	mov	r3, r2
 800225a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fae6 	bl	800182c <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	f040 820b 	bne.w	8002686 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	497c      	ldr	r1, [pc, #496]	; (800246c <HAL_I2C_Master_Receive+0x224>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb5a 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	e1fe      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2C_Master_Receive+0x50>
 8002294:	2302      	movs	r3, #2
 8002296:	e1f7      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d007      	beq.n	80022be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2222      	movs	r2, #34	; 0x22
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <HAL_I2C_Master_Receive+0x228>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fa46 	bl	8002798 <I2C_MasterRequestRead>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1b8      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d113      	bne.n	8002346 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e18c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b01      	cmp	r3, #1
 800234c:	d11b      	bne.n	8002386 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e16c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11b      	bne.n	80023c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	e14c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023ec:	e138      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	f200 80f1 	bhi.w	80025da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d123      	bne.n	8002448 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fbed 	bl	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e139      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002446:	e10b      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	2b02      	cmp	r3, #2
 800244e:	d14e      	bne.n	80024ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	2200      	movs	r2, #0
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <HAL_I2C_Master_Receive+0x22c>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa6a 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e10e      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
 800246a:	bf00      	nop
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000
 8002474:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e0b8      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	2200      	movs	r2, #0
 80024f6:	4966      	ldr	r1, [pc, #408]	; (8002690 <HAL_I2C_Master_Receive+0x448>)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fa1b 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0bf      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	494f      	ldr	r1, [pc, #316]	; (8002690 <HAL_I2C_Master_Receive+0x448>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9ed 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e091      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d8:	e042      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb00 	bl	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e04c      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d118      	bne.n	8002660 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	f47f aec2 	bne.w	80023ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3728      	adds	r7, #40	; 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	00010004 	.word	0x00010004

08002694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d006      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d003      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e00b      	b.n	80026e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d107      	bne.n	80026e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f91d 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d103      	bne.n	8002718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e035      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e01b      	b.n	8002770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	11db      	asrs	r3, r3, #7
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0306 	and.w	r3, r3, #6
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f063 030f 	orn	r3, r3, #15
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <I2C_MasterRequestWrite+0xfc>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f943 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e010      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <I2C_MasterRequestWrite+0x100>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f933 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	00010008 	.word	0x00010008
 8002794:	00010002 	.word	0x00010002

08002798 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d006      	beq.n	80027d2 <I2C_MasterRequestRead+0x3a>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d003      	beq.n	80027d2 <I2C_MasterRequestRead+0x3a>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e00b      	b.n	80027fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b11      	cmp	r3, #17
 80027ea:	d107      	bne.n	80027fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f893 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d103      	bne.n	800282c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e079      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002838:	d108      	bne.n	800284c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e05f      	b.n	800290c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	11db      	asrs	r3, r3, #7
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0306 	and.w	r3, r3, #6
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f063 030f 	orn	r3, r3, #15
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4930      	ldr	r1, [pc, #192]	; (800292c <I2C_MasterRequestRead+0x194>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f8b9 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e054      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4929      	ldr	r1, [pc, #164]	; (8002930 <I2C_MasterRequestRead+0x198>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f8a9 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e044      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f831 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e017      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	11db      	asrs	r3, r3, #7
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0306 	and.w	r3, r3, #6
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f063 030e 	orn	r3, r3, #14
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <I2C_MasterRequestRead+0x198>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f865 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00010008 	.word	0x00010008
 8002930:	00010002 	.word	0x00010002

08002934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	e025      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294c:	d021      	beq.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe ff6d 	bl	800182c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e023      	b.n	80029da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	e00c      	b.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d0b6      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f0:	e051      	b.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d123      	bne.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e046      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d021      	beq.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe feeb 	bl	800182c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e020      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e00b      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d18d      	bne.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aec:	e02d      	b.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f8ce 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e02d      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d021      	beq.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fe91 	bl	800182c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d1ca      	bne.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b6e:	e02d      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f88d 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02d      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b86:	d021      	beq.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fe50 	bl	800182c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d1ca      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf0:	e042      	b.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d119      	bne.n	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e029      	b.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fe fdfa 	bl	800182c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d1b5      	bne.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d11b      	bne.n	8002ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e264      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4ba3      	ldr	r3, [pc, #652]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4ba0      	ldr	r3, [pc, #640]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b9d      	ldr	r3, [pc, #628]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b99      	ldr	r3, [pc, #612]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e23f      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b91      	ldr	r3, [pc, #580]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a8a      	ldr	r2, [pc, #552]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fd40 	bl	800182c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fd3c 	bl	800182c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e204      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fd2c 	bl	800182c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fd28 	bl	800182c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f0      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c4      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4952      	ldr	r1, [pc, #328]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <HAL_RCC_OscConfig+0x2b0>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fce1 	bl	800182c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fcdd 	bl	800182c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a5      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4940      	ldr	r1, [pc, #256]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_OscConfig+0x2b0>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fcc0 	bl	800182c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fcbc 	bl	800182c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e184      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d030      	beq.n	8002f3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x2b4>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fca0 	bl	800182c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fc9c 	bl	800182c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e164      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e015      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_OscConfig+0x2b4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fc89 	bl	800182c <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fc85 	bl	800182c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e14d      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a0 	beq.w	800308a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_RCC_OscConfig+0x2b8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fc4b 	bl	800182c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e011      	b.n	8002fbe <HAL_RCC_OscConfig+0x2ce>
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
 8002fa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fe fc3e 	bl	800182c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e106      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <HAL_RCC_OscConfig+0x4e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2f0>
 8002fd2:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e01c      	b.n	800301a <HAL_RCC_OscConfig+0x32a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x312>
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a77      	ldr	r2, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x32a>
 8003002:	4b75      	ldr	r3, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a74      	ldr	r2, [pc, #464]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b72      	ldr	r3, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a71      	ldr	r2, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fc03 	bl	800182c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fbff 	bl	800182c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c5      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCC_OscConfig+0x33a>
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fe fbed 	bl	800182c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fbe9 	bl	800182c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0af      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 809b 	beq.w	80031ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d05c      	beq.n	800315a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d141      	bne.n	800312c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fbbd 	bl	800182c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fbb9 	bl	800182c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e081      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c8:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
 80030f8:	4937      	ldr	r1, [pc, #220]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fb92 	bl	800182c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fb8e 	bl	800182c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e056      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x41c>
 800312a:	e04e      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fb7b 	bl	800182c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe fb77 	bl	800182c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e03f      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x44a>
 8003158:	e037      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e032      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d028      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d11a      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40007000 	.word	0x40007000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	42470060 	.word	0x42470060

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe faac 	bl	800182c <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe faa8 	bl	800182c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fa0c 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08004158 	.word	0x08004158
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b2:	2100      	movs	r1, #0
 80033b4:	6079      	str	r1, [r7, #4]
 80033b6:	2100      	movs	r1, #0
 80033b8:	60f9      	str	r1, [r7, #12]
 80033ba:	2100      	movs	r1, #0
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033be:	2100      	movs	r1, #0
 80033c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c2:	4952      	ldr	r1, [pc, #328]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 80033c4:	6889      	ldr	r1, [r1, #8]
 80033c6:	f001 010c 	and.w	r1, r1, #12
 80033ca:	2908      	cmp	r1, #8
 80033cc:	d00d      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x3e>
 80033ce:	2908      	cmp	r1, #8
 80033d0:	f200 8094 	bhi.w	80034fc <HAL_RCC_GetSysClockFreq+0x150>
 80033d4:	2900      	cmp	r1, #0
 80033d6:	d002      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x32>
 80033d8:	2904      	cmp	r1, #4
 80033da:	d003      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x38>
 80033dc:	e08e      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_GetSysClockFreq+0x164>)
 80033e0:	60bb      	str	r3, [r7, #8]
       break;
 80033e2:	e08e      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <HAL_RCC_GetSysClockFreq+0x168>)
 80033e6:	60bb      	str	r3, [r7, #8]
      break;
 80033e8:	e08b      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ea:	4948      	ldr	r1, [pc, #288]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 80033ec:	6849      	ldr	r1, [r1, #4]
 80033ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f4:	4945      	ldr	r1, [pc, #276]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 80033f6:	6849      	ldr	r1, [r1, #4]
 80033f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d024      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003400:	4942      	ldr	r1, [pc, #264]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 8003402:	6849      	ldr	r1, [r1, #4]
 8003404:	0989      	lsrs	r1, r1, #6
 8003406:	4608      	mov	r0, r1
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003410:	f04f 0500 	mov.w	r5, #0
 8003414:	ea00 0204 	and.w	r2, r0, r4
 8003418:	ea01 0305 	and.w	r3, r1, r5
 800341c:	493d      	ldr	r1, [pc, #244]	; (8003514 <HAL_RCC_GetSysClockFreq+0x168>)
 800341e:	fb01 f003 	mul.w	r0, r1, r3
 8003422:	2100      	movs	r1, #0
 8003424:	fb01 f102 	mul.w	r1, r1, r2
 8003428:	1844      	adds	r4, r0, r1
 800342a:	493a      	ldr	r1, [pc, #232]	; (8003514 <HAL_RCC_GetSysClockFreq+0x168>)
 800342c:	fba2 0101 	umull	r0, r1, r2, r1
 8003430:	1863      	adds	r3, r4, r1
 8003432:	4619      	mov	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	f7fd f8a0 	bl	8000580 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e04a      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344a:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	461a      	mov	r2, r3
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	f240 10ff 	movw	r0, #511	; 0x1ff
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	ea02 0400 	and.w	r4, r2, r0
 8003462:	ea03 0501 	and.w	r5, r3, r1
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	014b      	lsls	r3, r1, #5
 8003474:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003478:	0142      	lsls	r2, r0, #5
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	1b00      	subs	r0, r0, r4
 8003480:	eb61 0105 	sbc.w	r1, r1, r5
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	018b      	lsls	r3, r1, #6
 800348e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003492:	0182      	lsls	r2, r0, #6
 8003494:	1a12      	subs	r2, r2, r0
 8003496:	eb63 0301 	sbc.w	r3, r3, r1
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	00d9      	lsls	r1, r3, #3
 80034a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a8:	00d0      	lsls	r0, r2, #3
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	1912      	adds	r2, r2, r4
 80034b0:	eb45 0303 	adc.w	r3, r5, r3
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	0299      	lsls	r1, r3, #10
 80034be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034c2:	0290      	lsls	r0, r2, #10
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	f7fd f854 	bl	8000580 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_RCC_GetSysClockFreq+0x160>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	3301      	adds	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	60bb      	str	r3, [r7, #8]
      break;
 80034fa:	e002      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCC_GetSysClockFreq+0x164>)
 80034fe:	60bb      	str	r3, [r7, #8]
      break;
 8003500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003502:	68bb      	ldr	r3, [r7, #8]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bdb0      	pop	{r4, r5, r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	017d7840 	.word	0x017d7840

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08004168 	.word	0x08004168

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800355c:	f7ff ffdc 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0b5b      	lsrs	r3, r3, #13
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4903      	ldr	r1, [pc, #12]	; (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	08004168 	.word	0x08004168

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03f      	b.n	8003612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe f82c 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f9cb 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08a      	sub	sp, #40	; 0x28
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d17c      	bne.n	8003734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_UART_Transmit+0x2c>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e075      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x3e>
 8003654:	2302      	movs	r3, #2
 8003656:	e06e      	b.n	8003736 <HAL_UART_Transmit+0x11c>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366e:	f7fe f8dd 	bl	800182c <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x82>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036ac:	e02a      	b.n	8003704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f8e2 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e036      	b.n	8003736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3302      	adds	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cf      	bne.n	80036ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8b2 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08a      	sub	sp, #40	; 0x28
 8003742:	af02      	add	r7, sp, #8
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 808c 	bne.w	8003878 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Receive+0x2e>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e084      	b.n	800387a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Receive+0x40>
 800377a:	2302      	movs	r3, #2
 800377c:	e07d      	b.n	800387a <HAL_UART_Receive+0x13c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2222      	movs	r2, #34	; 0x22
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fe f847 	bl	800182c <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Receive+0x8a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037d8:	e043      	b.n	8003862 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2120      	movs	r1, #32
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f84c 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e042      	b.n	800387a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	b29a      	uxth	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	3302      	adds	r3, #2
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e01f      	b.n	8003854 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d007      	beq.n	800382e <HAL_UART_Receive+0xf0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_UART_Receive+0xfe>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e008      	b.n	800384e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003848:	b2da      	uxtb	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1b6      	bne.n	80037da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b090      	sub	sp, #64	; 0x40
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	e050      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389a:	d04c      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a2:	f7fd ffc3 	bl	800182c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d241      	bcs.n	8003936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	637a      	str	r2, [r7, #52]	; 0x34
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e5      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	613b      	str	r3, [r7, #16]
   return(result);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003906:	623a      	str	r2, [r7, #32]
 8003908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	69f9      	ldr	r1, [r7, #28]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	61bb      	str	r3, [r7, #24]
   return(result);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e5      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d09f      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3740      	adds	r7, #64	; 0x40
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	b09f      	sub	sp, #124	; 0x7c
 8003966:	af00      	add	r7, sp, #0
 8003968:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	68d9      	ldr	r1, [r3, #12]
 8003978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	ea40 0301 	orr.w	r3, r0, r1
 8003980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	431a      	orrs	r2, r3
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	431a      	orrs	r2, r3
 8003992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4313      	orrs	r3, r2
 8003998:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a4:	f021 010c 	bic.w	r1, r1, #12
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	ea40 0301 	orr.w	r3, r0, r1
 80039c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4bc5      	ldr	r3, [pc, #788]	; (8003ce4 <UART_SetConfig+0x384>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d004      	beq.n	80039de <UART_SetConfig+0x7e>
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4bc3      	ldr	r3, [pc, #780]	; (8003ce8 <UART_SetConfig+0x388>)
 80039da:	429a      	cmp	r2, r3
 80039dc:	d103      	bne.n	80039e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039de:	f7ff fdbb 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 80039e2:	6778      	str	r0, [r7, #116]	; 0x74
 80039e4:	e002      	b.n	80039ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7ff fda3 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 80039ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f4:	f040 80b6 	bne.w	8003b64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fa:	461c      	mov	r4, r3
 80039fc:	f04f 0500 	mov.w	r5, #0
 8003a00:	4622      	mov	r2, r4
 8003a02:	462b      	mov	r3, r5
 8003a04:	1891      	adds	r1, r2, r2
 8003a06:	6439      	str	r1, [r7, #64]	; 0x40
 8003a08:	415b      	adcs	r3, r3
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a10:	1912      	adds	r2, r2, r4
 8003a12:	eb45 0303 	adc.w	r3, r5, r3
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	00d9      	lsls	r1, r3, #3
 8003a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a24:	00d0      	lsls	r0, r2, #3
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	1911      	adds	r1, r2, r4
 8003a2c:	6639      	str	r1, [r7, #96]	; 0x60
 8003a2e:	416b      	adcs	r3, r5
 8003a30:	667b      	str	r3, [r7, #100]	; 0x64
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	1891      	adds	r1, r2, r2
 8003a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a40:	415b      	adcs	r3, r3
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a4c:	f7fc fd98 	bl	8000580 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4ba5      	ldr	r3, [pc, #660]	; (8003cec <UART_SetConfig+0x38c>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	011e      	lsls	r6, r3, #4
 8003a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a60:	461c      	mov	r4, r3
 8003a62:	f04f 0500 	mov.w	r5, #0
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
 8003a72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a76:	1912      	adds	r2, r2, r4
 8003a78:	eb45 0303 	adc.w	r3, r5, r3
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	00d9      	lsls	r1, r3, #3
 8003a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a8a:	00d0      	lsls	r0, r2, #3
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	1911      	adds	r1, r2, r4
 8003a92:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a94:	416b      	adcs	r3, r5
 8003a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ab2:	f7fc fd65 	bl	8000580 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4b8c      	ldr	r3, [pc, #560]	; (8003cec <UART_SetConfig+0x38c>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	; 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a87      	ldr	r2, [pc, #540]	; (8003cec <UART_SetConfig+0x38c>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441e      	add	r6, r3
 8003ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	1894      	adds	r4, r2, r2
 8003aec:	623c      	str	r4, [r7, #32]
 8003aee:	415b      	adcs	r3, r3
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003af6:	1812      	adds	r2, r2, r0
 8003af8:	eb41 0303 	adc.w	r3, r1, r3
 8003afc:	f04f 0400 	mov.w	r4, #0
 8003b00:	f04f 0500 	mov.w	r5, #0
 8003b04:	00dd      	lsls	r5, r3, #3
 8003b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b0a:	00d4      	lsls	r4, r2, #3
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	462b      	mov	r3, r5
 8003b10:	1814      	adds	r4, r2, r0
 8003b12:	653c      	str	r4, [r7, #80]	; 0x50
 8003b14:	414b      	adcs	r3, r1
 8003b16:	657b      	str	r3, [r7, #84]	; 0x54
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	1891      	adds	r1, r2, r2
 8003b24:	61b9      	str	r1, [r7, #24]
 8003b26:	415b      	adcs	r3, r3
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b32:	f7fc fd25 	bl	8000580 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <UART_SetConfig+0x38c>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a67      	ldr	r2, [pc, #412]	; (8003cec <UART_SetConfig+0x38c>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 0207 	and.w	r2, r3, #7
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4432      	add	r2, r6
 8003b60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b62:	e0b9      	b.n	8003cd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b66:	461c      	mov	r4, r3
 8003b68:	f04f 0500 	mov.w	r5, #0
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	462b      	mov	r3, r5
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	6139      	str	r1, [r7, #16]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b7c:	1912      	adds	r2, r2, r4
 8003b7e:	eb45 0303 	adc.w	r3, r5, r3
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	00d9      	lsls	r1, r3, #3
 8003b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b90:	00d0      	lsls	r0, r2, #3
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	eb12 0804 	adds.w	r8, r2, r4
 8003b9a:	eb43 0905 	adc.w	r9, r3, r5
 8003b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bb6:	0082      	lsls	r2, r0, #2
 8003bb8:	4640      	mov	r0, r8
 8003bba:	4649      	mov	r1, r9
 8003bbc:	f7fc fce0 	bl	8000580 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <UART_SetConfig+0x38c>)
 8003bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	011e      	lsls	r6, r3, #4
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	1894      	adds	r4, r2, r2
 8003bdc:	60bc      	str	r4, [r7, #8]
 8003bde:	415b      	adcs	r3, r3
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be6:	1812      	adds	r2, r2, r0
 8003be8:	eb41 0303 	adc.w	r3, r1, r3
 8003bec:	f04f 0400 	mov.w	r4, #0
 8003bf0:	f04f 0500 	mov.w	r5, #0
 8003bf4:	00dd      	lsls	r5, r3, #3
 8003bf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bfa:	00d4      	lsls	r4, r2, #3
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	462b      	mov	r3, r5
 8003c00:	1814      	adds	r4, r2, r0
 8003c02:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c04:	414b      	adcs	r3, r1
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	008b      	lsls	r3, r1, #2
 8003c1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c20:	0082      	lsls	r2, r0, #2
 8003c22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c26:	f7fc fcab 	bl	8000580 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <UART_SetConfig+0x38c>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <UART_SetConfig+0x38c>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4e:	441e      	add	r6, r3
 8003c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c52:	4618      	mov	r0, r3
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	1894      	adds	r4, r2, r2
 8003c5e:	603c      	str	r4, [r7, #0]
 8003c60:	415b      	adcs	r3, r3
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c68:	1812      	adds	r2, r2, r0
 8003c6a:	eb41 0303 	adc.w	r3, r1, r3
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	f04f 0500 	mov.w	r5, #0
 8003c76:	00dd      	lsls	r5, r3, #3
 8003c78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c7c:	00d4      	lsls	r4, r2, #3
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	eb12 0a00 	adds.w	sl, r2, r0
 8003c86:	eb43 0b01 	adc.w	fp, r3, r1
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	008b      	lsls	r3, r1, #2
 8003c9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ca2:	0082      	lsls	r2, r0, #2
 8003ca4:	4650      	mov	r0, sl
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	f7fc fc6a 	bl	8000580 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <UART_SetConfig+0x38c>)
 8003cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2164      	movs	r1, #100	; 0x64
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a09      	ldr	r2, [pc, #36]	; (8003cec <UART_SetConfig+0x38c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4432      	add	r2, r6
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	377c      	adds	r7, #124	; 0x7c
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40011400 	.word	0x40011400
 8003cec:	51eb851f 	.word	0x51eb851f

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4d0d      	ldr	r5, [pc, #52]	; (8003d28 <__libc_init_array+0x38>)
 8003cf4:	4c0d      	ldr	r4, [pc, #52]	; (8003d2c <__libc_init_array+0x3c>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	4d0b      	ldr	r5, [pc, #44]	; (8003d30 <__libc_init_array+0x40>)
 8003d02:	4c0c      	ldr	r4, [pc, #48]	; (8003d34 <__libc_init_array+0x44>)
 8003d04:	f000 f874 	bl	8003df0 <_init>
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08004178 	.word	0x08004178
 8003d2c:	08004178 	.word	0x08004178
 8003d30:	08004178 	.word	0x08004178
 8003d34:	0800417c 	.word	0x0800417c

08003d38 <memcpy>:
 8003d38:	440a      	add	r2, r1
 8003d3a:	4291      	cmp	r1, r2
 8003d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d40:	d100      	bne.n	8003d44 <memcpy+0xc>
 8003d42:	4770      	bx	lr
 8003d44:	b510      	push	{r4, lr}
 8003d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d4e:	4291      	cmp	r1, r2
 8003d50:	d1f9      	bne.n	8003d46 <memcpy+0xe>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memset>:
 8003d54:	4402      	add	r2, r0
 8003d56:	4603      	mov	r3, r0
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <round>:
 8003d64:	ec51 0b10 	vmov	r0, r1, d0
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8003d6e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8003d72:	2c13      	cmp	r4, #19
 8003d74:	ee10 2a10 	vmov	r2, s0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	dc19      	bgt.n	8003db0 <round+0x4c>
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	da09      	bge.n	8003d94 <round+0x30>
 8003d80:	3401      	adds	r4, #1
 8003d82:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003d86:	d103      	bne.n	8003d90 <round+0x2c>
 8003d88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d90:	2100      	movs	r1, #0
 8003d92:	e028      	b.n	8003de6 <round+0x82>
 8003d94:	4d15      	ldr	r5, [pc, #84]	; (8003dec <round+0x88>)
 8003d96:	4125      	asrs	r5, r4
 8003d98:	ea01 0605 	and.w	r6, r1, r5
 8003d9c:	4332      	orrs	r2, r6
 8003d9e:	d00e      	beq.n	8003dbe <round+0x5a>
 8003da0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003da4:	fa42 f404 	asr.w	r4, r2, r4
 8003da8:	4423      	add	r3, r4
 8003daa:	ea23 0305 	bic.w	r3, r3, r5
 8003dae:	e7ef      	b.n	8003d90 <round+0x2c>
 8003db0:	2c33      	cmp	r4, #51	; 0x33
 8003db2:	dd07      	ble.n	8003dc4 <round+0x60>
 8003db4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003db8:	d101      	bne.n	8003dbe <round+0x5a>
 8003dba:	f7fc fa0b 	bl	80001d4 <__adddf3>
 8003dbe:	ec41 0b10 	vmov	d0, r0, r1
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8003dc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dcc:	40f5      	lsrs	r5, r6
 8003dce:	4228      	tst	r0, r5
 8003dd0:	d0f5      	beq.n	8003dbe <round+0x5a>
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003dd8:	fa01 f404 	lsl.w	r4, r1, r4
 8003ddc:	1912      	adds	r2, r2, r4
 8003dde:	bf28      	it	cs
 8003de0:	185b      	addcs	r3, r3, r1
 8003de2:	ea22 0105 	bic.w	r1, r2, r5
 8003de6:	4608      	mov	r0, r1
 8003de8:	4619      	mov	r1, r3
 8003dea:	e7e8      	b.n	8003dbe <round+0x5a>
 8003dec:	000fffff 	.word	0x000fffff

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
