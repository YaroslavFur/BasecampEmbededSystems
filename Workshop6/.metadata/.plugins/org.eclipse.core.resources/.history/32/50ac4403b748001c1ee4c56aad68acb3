/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "pca9685.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// char to int
int ctoi(char c)
{
	return c - '0';
}

uint8_t selectChannel()
{
	HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER CHANNEL 1-16\r\n", 20, 10);
	uint8_t channelToSet = 0;
	while (1)
	{
		result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
		if (result == HAL_OK)
		{
			if (rcvBuf >= '0' && rcvBuf <= '9')
			{
				channelToSet = channelToSet * 10 + ctoi(rcvBuf);
				HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 1, 10);
			}
			else if (rcvBuf == '\r' && channelToSet > 0)
			{
				return channelToSet;
			}
			else
			{
				HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
				break;
			}
		}
		if (channelToSet > 16)
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <16\r\n", 19, 10);
			break;
		}
	}

	return 0;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(10);

  if (pcaInit(hi2c1))
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nINITIALIZATION SUCCEED\r\n", 28, 10);
  else
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nINITIALIZATION FAILED\r\n", 27, 10);

  uint8_t rcvBuf;
  HAL_StatusTypeDef result;

  while (1)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n\nMENU:\r\n"
			  "1. ENABLE ALL OUTPUTS\r\n"
			  "2. DISABLE ALL OUTPUTS\r\n"
			  "3. ENABLE SLEEP MODE\r\n"
			  "4. DISABLE SLEEP MODE\r\n"
			  "5. SET FREQUENCY\r\n"
			  "6. SET DUTY CYCLE\r\n"
			  "ENTER NUMBER 1 - 6\r\n", 159, 100);

	  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000000);

	  if (result == HAL_OK)
	  {
		  switch (rcvBuf)
		  {
		  case '1':	// Enable all outputs
			  if (!pcaIsSleeping(hi2c1))
			  {
				  if (pcaEnableAllOutputs(hi2c1))
					  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL OUTPUTS ENABLED\r\n", 21, 10);
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING ALL OUTPUTS\r\n", 29, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
			  break;
		  case '2':	// Disable all outputs
			  if (!pcaIsSleeping(hi2c1))
			  {
				  if (pcaDisableAllOutputs(hi2c1))
					  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL OUTPUTS DISABLED\r\n", 22, 10);
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING ALL OUTPUTS\r\n", 30, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"FIRST DISABLE SLEEP MODE\r\n", 26, 10);
			  break;
		  case '3':	// Enable sleep mode
			  if (!pcaIsSleeping(hi2c1))
			  {
				  if (pcaEnableSleepMode(hi2c1))
					  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ENABLED\r\n", 21, 10);
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED ENABLING SLEEP MODE\r\n", 28, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY ENABLED\r\n", 29, 10);
			  break;
		  case '4':	// Disable sleep mode
			  if (!pcaIsSleeping(hi2c1))
			  {
				  if (pcaDisableSleepMode(hi2c1))
					  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE DISABLED\r\n", 22, 10);
				  else
					  HAL_UART_Transmit(&huart3, (uint8_t *)"FAILED DISABLING SLEEP MODE\r\n", 29, 10);
			  }
			  else
				  HAL_UART_Transmit(&huart3, (uint8_t *)"SLEEP MODE ALREADY DISABLED\r\n", 30, 10);
			  break;
		  case '5':	// Set frequency
			  HAL_UART_Transmit(&huart3, (uint8_t *)"ENTER NEW FREQUENCY 24 - 1 526\r\n", 36, 10);
			  uint32_t newFrequency = 0;
			  while (1)
			  {
				  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 10);
				  if (result == HAL_OK)
				  {
					  if (rcvBuf >= '0' && rcvBuf <= '9')
					  {
						  newFrequency = newFrequency * 10 + ctoi(rcvBuf);
						  HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 3, 10);
					  }
					  else if (rcvBuf == '\r' && newFrequency >= 24)
					  {
						  if (pcaSetFrequency(hi2c1, newFrequency))
						  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nFREQUENCY IS SET\r\n", 20, 10);
						  else
							  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nFAILED IN SETTING FREQUENCY\r\n", 31, 10);
						  break;
					  }
					  else
					  {
						  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
						  break;
					  }
				  }
				  if (newFrequency > 1526)
				  {
					  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <1 526\r\n", 26, 10);
					  break;
				  }
			  }
			  break;
		  case '6':	// Set duty cycle to channel
			  uint8_t channelToSet = 0;
			  if ((channelToSet = selectChannel()) != 0)
			  {
				  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nENTER NEW DUTY CYCLE 0 - 100\r\n", 32, 10);
				  uint8_t newDutyCycle = 0;
				  while (1)
				  {
					  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
					  if (result == HAL_OK)
					  {
						  if (rcvBuf >= '0' && rcvBuf <= '9')
						  {
							  newDutyCycle = newDutyCycle * 10 + ctoi(rcvBuf);
							  HAL_UART_Transmit(&huart3, (uint8_t *)&rcvBuf, 1, 10);
						  }
						  else if (rcvBuf == '\r' && newDutyCycle >= 0)
						  {
							  if (pcaSetDutyCycle(hi2c1, channelToSet, newDutyCycle))
								  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nDUTY CYCLE IS SET\r\n", 21, 10);
							  else
								  HAL_UART_Transmit(&huart3,
										  (uint8_t *)"\r\nFAILED IN SETTING DUTY CYCLE\r\n", 32, 10);
							  break;
						  }
						  else
						  {
							  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER CORRECT NUMBER\r\n", 23, 10);
							  break;
						  }
					  }
					  if (newDutyCycle > 100)
					  {
						  HAL_UART_Transmit(&huart3, (uint8_t *)" ENTER NUMBER <100\r\n", 20, 10);
						  break;
					  }
				  }
			  }
			  break;
		  default:
			  HAL_UART_Transmit(&huart3, (uint8_t *)"WRONG KEY\r\n", 11, 10);
			  break;
		  }
		  HAL_Delay(1000);
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 50000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
