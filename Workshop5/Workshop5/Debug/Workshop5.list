
Workshop5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004138  08004138  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000114  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f62e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cee  00000000  00000000  0002f6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  000313e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c08  00000000  00000000  00032090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223da  00000000  00000000  00032c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e62c  00000000  00000000  00055072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d79d5  00000000  00000000  0006369e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b073  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003988  00000000  00000000  0013b0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004018 	.word	0x08004018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08004018 	.word	0x08004018

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <togglePinAndSendState>:
		{"GREEN OFF\r\n", "ORANGE OFF\r\n", "RED OFF\r\n", "BLUE OFF\r\n"}};
const uint8_t secondsForTempCheck = 5;
uint8_t secondsPassed = 0;

void togglePinAndSendState(uint16_t OUT_Pin)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
	int8_t onOff = (HAL_GPIO_ReadPin(GPIOD, OUT_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4619      	mov	r1, r3
 8000586:	4847      	ldr	r0, [pc, #284]	; (80006a4 <togglePinAndSendState+0x12c>)
 8000588:	f001 fc00 	bl	8001d8c <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	bf0c      	ite	eq
 8000592:	2301      	moveq	r3, #1
 8000594:	2300      	movne	r3, #0
 8000596:	b2db      	uxtb	r3, r3
 8000598:	73fb      	strb	r3, [r7, #15]

	switch (OUT_Pin)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005a0:	d058      	beq.n	8000654 <togglePinAndSendState+0xdc>
 80005a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005a6:	dc6e      	bgt.n	8000686 <togglePinAndSendState+0x10e>
 80005a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005ac:	d039      	beq.n	8000622 <togglePinAndSendState+0xaa>
 80005ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005b2:	dc68      	bgt.n	8000686 <togglePinAndSendState+0x10e>
 80005b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005b8:	d003      	beq.n	80005c2 <togglePinAndSendState+0x4a>
 80005ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005be:	d017      	beq.n	80005f0 <togglePinAndSendState+0x78>
 80005c0:	e061      	b.n	8000686 <togglePinAndSendState+0x10e>
	{
	case GPIO_PIN_12:
		HAL_UART_Transmit(&huart3, (uint8_t *)colors[onOff][0], strlen(colors[onOff][0]), 10);
 80005c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c6:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <togglePinAndSendState+0x130>)
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	4413      	add	r3, r2
 80005cc:	681c      	ldr	r4, [r3, #0]
 80005ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d2:	4a35      	ldr	r2, [pc, #212]	; (80006a8 <togglePinAndSendState+0x130>)
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	4413      	add	r3, r2
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	4621      	mov	r1, r4
 80005e8:	4830      	ldr	r0, [pc, #192]	; (80006ac <togglePinAndSendState+0x134>)
 80005ea:	f002 fd4a 	bl	8003082 <HAL_UART_Transmit>
		break;
 80005ee:	e051      	b.n	8000694 <togglePinAndSendState+0x11c>

	case GPIO_PIN_13:
		HAL_UART_Transmit(&huart3, (uint8_t *)colors[onOff][1], strlen(colors[onOff][1]), 10);
 80005f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f4:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <togglePinAndSendState+0x130>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	681c      	ldr	r4, [r3, #0]
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <togglePinAndSendState+0x130>)
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	3304      	adds	r3, #4
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fddf 	bl	80001d0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	230a      	movs	r3, #10
 8000618:	4621      	mov	r1, r4
 800061a:	4824      	ldr	r0, [pc, #144]	; (80006ac <togglePinAndSendState+0x134>)
 800061c:	f002 fd31 	bl	8003082 <HAL_UART_Transmit>
		break;
 8000620:	e038      	b.n	8000694 <togglePinAndSendState+0x11c>

	case GPIO_PIN_14:
		HAL_UART_Transmit(&huart3, (uint8_t *)colors[onOff][2], strlen(colors[onOff][2]), 10);
 8000622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <togglePinAndSendState+0x130>)
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	4413      	add	r3, r2
 800062c:	3308      	adds	r3, #8
 800062e:	681c      	ldr	r4, [r3, #0]
 8000630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <togglePinAndSendState+0x130>)
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	4413      	add	r3, r2
 800063a:	3308      	adds	r3, #8
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdc6 	bl	80001d0 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	230a      	movs	r3, #10
 800064a:	4621      	mov	r1, r4
 800064c:	4817      	ldr	r0, [pc, #92]	; (80006ac <togglePinAndSendState+0x134>)
 800064e:	f002 fd18 	bl	8003082 <HAL_UART_Transmit>
		break;
 8000652:	e01f      	b.n	8000694 <togglePinAndSendState+0x11c>

	case GPIO_PIN_15:
		HAL_UART_Transmit(&huart3, (uint8_t *)colors[onOff][3], strlen(colors[onOff][3]), 10);
 8000654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <togglePinAndSendState+0x130>)
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	4413      	add	r3, r2
 800065e:	330c      	adds	r3, #12
 8000660:	681c      	ldr	r4, [r3, #0]
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <togglePinAndSendState+0x130>)
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	330c      	adds	r3, #12
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	230a      	movs	r3, #10
 800067c:	4621      	mov	r1, r4
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <togglePinAndSendState+0x134>)
 8000680:	f002 fcff 	bl	8003082 <HAL_UART_Transmit>
		break;
 8000684:	e006      	b.n	8000694 <togglePinAndSendState+0x11c>

	default:
		HAL_UART_Transmit(&huart3, (uint8_t *)"WRONG OUT PIN\r\n", 15, 10);
 8000686:	230a      	movs	r3, #10
 8000688:	220f      	movs	r2, #15
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <togglePinAndSendState+0x138>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <togglePinAndSendState+0x134>)
 800068e:	f002 fcf8 	bl	8003082 <HAL_UART_Transmit>
		return;
 8000692:	e004      	b.n	800069e <togglePinAndSendState+0x126>
	}

	HAL_GPIO_TogglePin(GPIOD, OUT_Pin);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4619      	mov	r1, r3
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <togglePinAndSendState+0x12c>)
 800069a:	f001 fba8 	bl	8001dee <HAL_GPIO_TogglePin>
}
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000104 	.word	0x20000104
 80006b0:	08004094 	.word	0x08004094

080006b4 <sendCurrentTemp>:

void sendCurrentTemp()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08e      	sub	sp, #56	; 0x38
 80006b8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80006ba:	481b      	ldr	r0, [pc, #108]	; (8000728 <sendCurrentTemp+0x74>)
 80006bc:	f000 fcfc 	bl	80010b8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80006c0:	2164      	movs	r1, #100	; 0x64
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <sendCurrentTemp+0x74>)
 80006c4:	f000 fdfd 	bl	80012c2 <HAL_ADC_PollForConversion>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d124      	bne.n	8000718 <sendCurrentTemp+0x64>
	{
		int16_t value = HAL_ADC_GetValue(&hadc1);
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <sendCurrentTemp+0x74>)
 80006d0:	f000 fe82 	bl	80013d8 <HAL_ADC_GetValue>
 80006d4:	4603      	mov	r3, r0
 80006d6:	86fb      	strh	r3, [r7, #54]	; 0x36

										// slope = (1600(when 45 degrees) - 2050(when 20 degrees))) / (45 - 20) = 18
		value = (value - 2050)/-18 + 20;	// by formula (VSence - V25 (used 20)) / avgSlope + 25 (used 20)
 80006d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80006dc:	f6a3 0302 	subw	r3, r3, #2050	; 0x802
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <sendCurrentTemp+0x78>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1092      	asrs	r2, r2, #2
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3314      	adds	r3, #20
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	86fb      	strh	r3, [r7, #54]	; 0x36

		char message[50];
		sprintf(message, "%d Celsius degrees captured\r\n", value);
 80006f4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <sendCurrentTemp+0x7c>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 f85d 	bl	80037bc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)&message, strlen(message), 10);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd63 	bl	80001d0 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	b29a      	uxth	r2, r3
 800070e:	1d39      	adds	r1, r7, #4
 8000710:	230a      	movs	r3, #10
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <sendCurrentTemp+0x80>)
 8000714:	f002 fcb5 	bl	8003082 <HAL_UART_Transmit>
	}
	HAL_ADC_Stop(&hadc1);
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <sendCurrentTemp+0x74>)
 800071a:	f000 fd9f 	bl	800125c <HAL_ADC_Stop>
}
 800071e:	bf00      	nop
 8000720:	3738      	adds	r7, #56	; 0x38
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000148 	.word	0x20000148
 800072c:	38e38e39 	.word	0x38e38e39
 8000730:	080040a4 	.word	0x080040a4
 8000734:	20000104 	.word	0x20000104

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fc05 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f849 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f96f 	bl	8000a28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800074a:	f000 f943 	bl	80009d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800074e:	f000 f8a1 	bl	8000894 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000752:	f000 f8f1 	bl	8000938 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <main+0x94>)
 8000758:	f002 f814 	bl	8002784 <HAL_TIM_Base_Start_IT>
  uint8_t rcvBuf[1];
  HAL_StatusTypeDef result;

  while (1)
  {
	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	230a      	movs	r3, #10
 8000760:	2201      	movs	r2, #1
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <main+0x98>)
 8000764:	f002 fd1f 	bl	80031a6 <HAL_UART_Receive>
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]

	  if (result == HAL_OK)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d129      	bne.n	80007c6 <main+0x8e>
	  {
		  switch (rcvBuf[0])
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	3b32      	subs	r3, #50	; 0x32
 8000776:	2b03      	cmp	r3, #3
 8000778:	d81e      	bhi.n	80007b8 <main+0x80>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <main+0x48>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	08000791 	.word	0x08000791
 8000784:	0800079b 	.word	0x0800079b
 8000788:	080007a5 	.word	0x080007a5
 800078c:	080007af 	.word	0x080007af
		  {
		  case '2':
			  togglePinAndSendState(GPIO_PIN_12);
 8000790:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000794:	f7ff fef0 	bl	8000578 <togglePinAndSendState>
			  break;
 8000798:	e016      	b.n	80007c8 <main+0x90>

		  case '3':
			  togglePinAndSendState(GPIO_PIN_13);
 800079a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800079e:	f7ff feeb 	bl	8000578 <togglePinAndSendState>
			  break;
 80007a2:	e011      	b.n	80007c8 <main+0x90>

		  case '4':
			  togglePinAndSendState(GPIO_PIN_14);
 80007a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007a8:	f7ff fee6 	bl	8000578 <togglePinAndSendState>
			  break;
 80007ac:	e00c      	b.n	80007c8 <main+0x90>

		  case '5':
			  togglePinAndSendState(GPIO_PIN_15);
 80007ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007b2:	f7ff fee1 	bl	8000578 <togglePinAndSendState>
			  break;
 80007b6:	e007      	b.n	80007c8 <main+0x90>

		  default:
			  HAL_UART_Transmit(&huart3, (uint8_t *)"WRONG KEY\r\n", 11, 10);
 80007b8:	230a      	movs	r3, #10
 80007ba:	220b      	movs	r2, #11
 80007bc:	4905      	ldr	r1, [pc, #20]	; (80007d4 <main+0x9c>)
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <main+0x98>)
 80007c0:	f002 fc5f 	bl	8003082 <HAL_UART_Transmit>
			  break;
 80007c4:	e000      	b.n	80007c8 <main+0x90>
		  }
	  }
 80007c6:	bf00      	nop
	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 80007c8:	e7c8      	b.n	800075c <main+0x24>
 80007ca:	bf00      	nop
 80007cc:	200000bc 	.word	0x200000bc
 80007d0:	20000104 	.word	0x20000104
 80007d4:	080040c4 	.word	0x080040c4

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 ffe0 	bl	80037ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <SystemClock_Config+0xb4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <SystemClock_Config+0xb4>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SystemClock_Config+0xb4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <SystemClock_Config+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <SystemClock_Config+0xb8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <SystemClock_Config+0xb8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fb03 	bl	8001e54 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000854:	f000 f9d6 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fd66 	bl	8002344 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087e:	f000 f9c1 	bl	8000c04 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0x98>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0x98>)
 80008ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC1_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC1_Init+0x98>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0x98>)
 80008f6:	f000 fb9b 	bl	8001030 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f980 	bl	8000c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000904:	2309      	movs	r3, #9
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800090c:	2307      	movs	r3, #7
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0x98>)
 8000916:	f000 fd6d 	bl	80013f4 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 f970 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000148 	.word	0x20000148
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM4_Init+0x94>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_TIM4_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM4_Init+0x94>)
 800095c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000960:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM4_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_TIM4_Init+0x94>)
 800096a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_TIM4_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM4_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_TIM4_Init+0x94>)
 800097e:	f001 feb1 	bl	80026e4 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000988:	f000 f93c 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM4_Init+0x94>)
 800099a:	f002 f86b 	bl	8002a74 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80009a4:	f000 f92e 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIM4_Init+0x94>)
 80009b6:	f002 fa87 	bl	8002ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f920 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000bc 	.word	0x200000bc
 80009d0:	40000800 	.word	0x40000800

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART3_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a0c:	f002 faec 	bl	8002fe8 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f8f5 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000104 	.word	0x20000104
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a3c      	ldr	r2, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a35      	ldr	r2, [pc, #212]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x114>)
 8000ab6:	f001 f981 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481a      	ldr	r0, [pc, #104]	; (8000b3c <MX_GPIO_Init+0x114>)
 8000ad4:	f000 ffbe 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000ad8:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4814      	ldr	r0, [pc, #80]	; (8000b40 <MX_GPIO_Init+0x118>)
 8000af0:	f000 ffb0 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x11c>)
 8000b0c:	f000 ffa2 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2017      	movs	r0, #23
 8000b16:	f000 ff66 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b1a:	2017      	movs	r0, #23
 8000b1c:	f000 ff7f 	bl	8001a1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f000 ff5e 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2a:	2028      	movs	r0, #40	; 0x28
 8000b2c:	f000 ff77 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_PIN)
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b58:	d027      	beq.n	8000baa <HAL_GPIO_EXTI_Callback+0x62>
 8000b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b5e:	dc27      	bgt.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x68>
 8000b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b64:	d01c      	beq.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x58>
 8000b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b6a:	dc21      	bgt.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x68>
 8000b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b70:	d00c      	beq.n	8000b8c <HAL_GPIO_EXTI_Callback+0x44>
 8000b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b76:	dc1b      	bgt.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x68>
 8000b78:	2b40      	cmp	r3, #64	; 0x40
 8000b7a:	d00c      	beq.n	8000b96 <HAL_GPIO_EXTI_Callback+0x4e>
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b80:	d116      	bne.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x68>
	{
	case (GPIO_PIN_8):
		togglePinAndSendState(GPIO_PIN_12);
 8000b82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b86:	f7ff fcf7 	bl	8000578 <togglePinAndSendState>
		break;
 8000b8a:	e018      	b.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>

	case (GPIO_PIN_9):
		togglePinAndSendState(GPIO_PIN_13);
 8000b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b90:	f7ff fcf2 	bl	8000578 <togglePinAndSendState>
		break;
 8000b94:	e013      	b.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>

	case (GPIO_PIN_6):
		togglePinAndSendState(GPIO_PIN_14);
 8000b96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b9a:	f7ff fced 	bl	8000578 <togglePinAndSendState>
		break;
 8000b9e:	e00e      	b.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>

	case (GPIO_PIN_11):
		togglePinAndSendState(GPIO_PIN_15);
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fce8 	bl	8000578 <togglePinAndSendState>
		break;
 8000ba8:	e009      	b.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>

	case (GPIO_PIN_15):
		sendCurrentTemp();
 8000baa:	f7ff fd83 	bl	80006b4 <sendCurrentTemp>
		break;
 8000bae:	e006      	b.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>

	default:
		HAL_UART_Transmit(&huart3, (uint8_t *)"WRONG BOARD KEY\r\n", 17, 10);
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	2211      	movs	r2, #17
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x84>)
 8000bb8:	f002 fa63 	bl	8003082 <HAL_UART_Transmit>
		break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080040d0 	.word	0x080040d0
 8000bcc:	20000104 	.word	0x20000104

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if (secondsPassed == secondsForTempCheck)
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d104      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		sendCurrentTemp();
 8000be2:	f7ff fd67 	bl	80006b4 <sendCurrentTemp>
		secondsPassed = 0;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	}
	secondsPassed++;
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bf6:	701a      	strb	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000ac 	.word	0x200000ac

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_ADC_MspInit+0x7c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d127      	bne.n	8000cd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_ADC_MspInit+0x84>)
 8000cce:	f000 fec1 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d115      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_Base_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <HAL_TIM_Base_MspInit+0x4c>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_TIM_Base_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201e      	movs	r0, #30
 8000d1c:	f000 fe63 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d20:	201e      	movs	r0, #30
 8000d22:	f000 fe7c 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40000800 	.word	0x40000800
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0x8c>)
 8000db0:	f000 fe50 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8ec 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e20:	2040      	movs	r0, #64	; 0x40
 8000e22:	f000 ffff 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e2a:	f000 fffb 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e32:	f000 fff7 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM4_IRQHandler+0x10>)
 8000e42:	f001 fd0f 	bl	8002864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000bc 	.word	0x200000bc

08000e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e58:	f000 ffe4 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e60:	f000 ffe0 	bl	8001e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f002 fc5e 	bl	8003758 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	200000b0 	.word	0x200000b0
 8000ed0:	200001a8 	.word	0x200001a8

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f22:	f7ff ffd7 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f002 fc1d 	bl	8003764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc05 	bl	8000738 <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f3c:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 8000f40:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f44:	200001a4 	.word	0x200001a4

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fd2b 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe46 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fd43 	bl	8001a3a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 fd0b 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000020 	.word	0x20000020
 8000fe8:	20000028 	.word	0x20000028
 8000fec:	20000024 	.word	0x20000024

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000028 	.word	0x20000028
 8001014:	20000190 	.word	0x20000190

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000190 	.word	0x20000190

08001030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e033      	b.n	80010ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe06 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d118      	bne.n	80010a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	f043 0202 	orr.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fad8 	bl	8001638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
 800109e:	e001      	b.n	80010a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Start+0x1a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e0b2      	b.n	8001238 <HAL_ADC_Start+0x180>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d018      	beq.n	800111a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <HAL_ADC_Start+0x18c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_ADC_Start+0x190>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9a      	lsrs	r2, r3, #18
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800110c:	e002      	b.n	8001114 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	d17a      	bne.n	800121e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001152:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001166:	d106      	bne.n	8001176 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	f023 0206 	bic.w	r2, r3, #6
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
 8001174:	e002      	b.n	800117c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <HAL_ADC_Start+0x194>)
 8001186:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001190:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d12a      	bne.n	80011f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2b      	ldr	r2, [pc, #172]	; (8001250 <HAL_ADC_Start+0x198>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d015      	beq.n	80011d4 <HAL_ADC_Start+0x11c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <HAL_ADC_Start+0x19c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d105      	bne.n	80011be <HAL_ADC_Start+0x106>
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_ADC_Start+0x194>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_ADC_Start+0x1a0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d136      	bne.n	8001236 <HAL_ADC_Start+0x17e>
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_ADC_Start+0x194>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d130      	bne.n	8001236 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d129      	bne.n	8001236 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	e020      	b.n	8001236 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_ADC_Start+0x198>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d11b      	bne.n	8001236 <HAL_ADC_Start+0x17e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d114      	bne.n	8001236 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e00b      	b.n	8001236 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000020 	.word	0x20000020
 8001248:	431bde83 	.word	0x431bde83
 800124c:	40012300 	.word	0x40012300
 8001250:	40012000 	.word	0x40012000
 8001254:	40012100 	.word	0x40012100
 8001258:	40012200 	.word	0x40012200

0800125c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Stop+0x16>
 800126e:	2302      	movs	r3, #2
 8001270:	e021      	b.n	80012b6 <HAL_ADC_Stop+0x5a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d113      	bne.n	8001308 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e063      	b.n	80013d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001308:	f7ff fe86 	bl	8001018 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800130e:	e021      	b.n	8001354 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001316:	d01d      	beq.n	8001354 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_ADC_PollForConversion+0x6c>
 800131e:	f7ff fe7b 	bl	8001018 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d212      	bcs.n	8001354 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b02      	cmp	r3, #2
 800133a:	d00b      	beq.n	8001354 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f043 0204 	orr.w	r2, r3, #4
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03d      	b.n	80013d0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d1d6      	bne.n	8001310 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0212 	mvn.w	r2, #18
 800136a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d123      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11f      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d111      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1c>
 800140c:	2302      	movs	r3, #2
 800140e:	e105      	b.n	800161c <HAL_ADC_ConfigChannel+0x228>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b09      	cmp	r3, #9
 800141e:	d925      	bls.n	800146c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	3b1e      	subs	r3, #30
 8001436:	2207      	movs	r2, #7
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43da      	mvns	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68d9      	ldr	r1, [r3, #12]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4403      	add	r3, r0
 800145e:	3b1e      	subs	r3, #30
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e022      	b.n	80014b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	2207      	movs	r2, #7
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4403      	add	r3, r0
 80014a8:	409a      	lsls	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d824      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b05      	subs	r3, #5
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b05      	subs	r3, #5
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e04c      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d824      	bhi.n	8001556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	221f      	movs	r2, #31
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b23      	subs	r3, #35	; 0x23
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	e023      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b41      	subs	r3, #65	; 0x41
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_ADC_ConfigChannel+0x234>)
 80015a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_ADC_ConfigChannel+0x238>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_ADC_ConfigChannel+0x238>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d123      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d003      	beq.n	80015da <HAL_ADC_ConfigChannel+0x1e6>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	d11b      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d111      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_ADC_ConfigChannel+0x23c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_ADC_ConfigChannel+0x240>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9a      	lsrs	r2, r3, #18
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001604:	e002      	b.n	800160c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40012300 	.word	0x40012300
 800162c:	40012000 	.word	0x40012000
 8001630:	20000020 	.word	0x20000020
 8001634:	431bde83 	.word	0x431bde83

08001638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001640:	4b79      	ldr	r3, [pc, #484]	; (8001828 <ADC_Init+0x1f0>)
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	431a      	orrs	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	021a      	lsls	r2, r3, #8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	4a58      	ldr	r2, [pc, #352]	; (800182c <ADC_Init+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e00f      	b.n	8001736 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0202 	bic.w	r2, r2, #2
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e1b      	ldrb	r3, [r3, #24]
 8001750:	005a      	lsls	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001772:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	3b01      	subs	r3, #1
 8001790:	035a      	lsls	r2, r3, #13
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	e007      	b.n	80017ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	051a      	lsls	r2, r3, #20
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ee:	025a      	lsls	r2, r3, #9
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	029a      	lsls	r2, r3, #10
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40012300 	.word	0x40012300
 800182c:	0f000001 	.word	0x0f000001

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e16b      	b.n	8001d48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 815a 	bne.w	8001d42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d130      	bne.n	8001b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 0201 	and.w	r2, r3, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d017      	beq.n	8001b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80b4 	beq.w	8001d42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a5f      	ldr	r2, [pc, #380]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf6:	4a5b      	ldr	r2, [pc, #364]	; (8001d64 <HAL_GPIO_Init+0x310>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x314>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x318>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d025      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_GPIO_Init+0x31c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01f      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4d      	ldr	r2, [pc, #308]	; (8001d7c <HAL_GPIO_Init+0x328>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	; (8001d80 <HAL_GPIO_Init+0x32c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x20a>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00e      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x310>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbe:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae90 	bls.w	8001a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fe80 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e264      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	4ba3      	ldr	r3, [pc, #652]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d05b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e23f      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x74>
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a90      	ldr	r2, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a87      	ldr	r2, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001eec:	4b84      	ldr	r3, [pc, #528]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a83      	ldr	r2, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a80      	ldr	r2, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f884 	bl	8001018 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff f880 	bl	8001018 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e204      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f870 	bl	8001018 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f86c 	bl	8001018 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1f0      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b6c      	ldr	r3, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1c4      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4952      	ldr	r1, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x2b0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f825 	bl	8001018 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f821 	bl	8001018 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1a5      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4940      	ldr	r1, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x2b0>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f804 	bl	8001018 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f800 	bl	8001018 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e184      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d030      	beq.n	80020a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x2b4>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe ffe4 	bl	8001018 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe ffe0 	bl	8001018 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e164      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x200>
 8002072:	e015      	b.n	80020a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x2b4>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7fe ffcd 	bl	8001018 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe ffc9 	bl	8001018 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e14d      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a0 	beq.w	80021ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d121      	bne.n	800212e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_RCC_OscConfig+0x2b8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff8f 	bl	8001018 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e011      	b.n	8002122 <HAL_RCC_OscConfig+0x2ce>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
 800210c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe ff82 	bl	8001018 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e106      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b85      	ldr	r3, [pc, #532]	; (8002338 <HAL_RCC_OscConfig+0x4e4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d106      	bne.n	8002144 <HAL_RCC_OscConfig+0x2f0>
 8002136:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a80      	ldr	r2, [pc, #512]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x32a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 800214c:	4b7b      	ldr	r3, [pc, #492]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a7a      	ldr	r2, [pc, #488]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	4b78      	ldr	r3, [pc, #480]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a77      	ldr	r2, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x32a>
 8002166:	4b75      	ldr	r3, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a74      	ldr	r2, [pc, #464]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a71      	ldr	r2, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe ff47 	bl	8001018 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe ff43 	bl	8001018 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0c5      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x33a>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe ff31 	bl	8001018 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe ff2d 	bl	8001018 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0af      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b5a      	ldr	r3, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a55      	ldr	r2, [pc, #340]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 809b 	beq.w	800232e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d05c      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d141      	bne.n	8002290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x4ec>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe ff01 	bl	8001018 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fefd 	bl	8001018 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e081      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	019b      	lsls	r3, r3, #6
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x4ec>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fed6 	bl	8001018 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fed2 	bl	8001018 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e056      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x41c>
 800228e:	e04e      	b.n	800232e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x4ec>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe febf 	bl	8001018 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe febb 	bl	8001018 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e03f      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x44a>
 80022bc:	e037      	b.n	800232e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e032      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_RCC_OscConfig+0x4e8>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d028      	beq.n	800232a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d121      	bne.n	800232a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d11a      	bne.n	800232a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002300:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	3b01      	subs	r3, #1
 8002314:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d107      	bne.n	800232a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40007000 	.word	0x40007000
 800233c:	40023800 	.word	0x40023800
 8002340:	42470060 	.word	0x42470060

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7fe fdf0 	bl	8001018 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7fe fdec 	bl	8001018 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fd50 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	080040e4 	.word	0x080040e4
 8002508:	20000020 	.word	0x20000020
 800250c:	20000024 	.word	0x20000024

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002516:	2100      	movs	r1, #0
 8002518:	6079      	str	r1, [r7, #4]
 800251a:	2100      	movs	r1, #0
 800251c:	60f9      	str	r1, [r7, #12]
 800251e:	2100      	movs	r1, #0
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002522:	2100      	movs	r1, #0
 8002524:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002526:	4952      	ldr	r1, [pc, #328]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 8002528:	6889      	ldr	r1, [r1, #8]
 800252a:	f001 010c 	and.w	r1, r1, #12
 800252e:	2908      	cmp	r1, #8
 8002530:	d00d      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x3e>
 8002532:	2908      	cmp	r1, #8
 8002534:	f200 8094 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x150>
 8002538:	2900      	cmp	r1, #0
 800253a:	d002      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x32>
 800253c:	2904      	cmp	r1, #4
 800253e:	d003      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x38>
 8002540:	e08e      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002542:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_GetSysClockFreq+0x164>)
 8002544:	60bb      	str	r3, [r7, #8]
       break;
 8002546:	e08e      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCC_GetSysClockFreq+0x168>)
 800254a:	60bb      	str	r3, [r7, #8]
      break;
 800254c:	e08b      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254e:	4948      	ldr	r1, [pc, #288]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 8002550:	6849      	ldr	r1, [r1, #4]
 8002552:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002556:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002558:	4945      	ldr	r1, [pc, #276]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 800255a:	6849      	ldr	r1, [r1, #4]
 800255c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002560:	2900      	cmp	r1, #0
 8002562:	d024      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002564:	4942      	ldr	r1, [pc, #264]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 8002566:	6849      	ldr	r1, [r1, #4]
 8002568:	0989      	lsrs	r1, r1, #6
 800256a:	4608      	mov	r0, r1
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002574:	f04f 0500 	mov.w	r5, #0
 8002578:	ea00 0204 	and.w	r2, r0, r4
 800257c:	ea01 0305 	and.w	r3, r1, r5
 8002580:	493d      	ldr	r1, [pc, #244]	; (8002678 <HAL_RCC_GetSysClockFreq+0x168>)
 8002582:	fb01 f003 	mul.w	r0, r1, r3
 8002586:	2100      	movs	r1, #0
 8002588:	fb01 f102 	mul.w	r1, r1, r2
 800258c:	1844      	adds	r4, r0, r1
 800258e:	493a      	ldr	r1, [pc, #232]	; (8002678 <HAL_RCC_GetSysClockFreq+0x168>)
 8002590:	fba2 0101 	umull	r0, r1, r2, r1
 8002594:	1863      	adds	r3, r4, r1
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fd fe6e 	bl	8000280 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e04a      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	461a      	mov	r2, r3
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	ea02 0400 	and.w	r4, r2, r0
 80025c6:	ea03 0501 	and.w	r5, r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	014b      	lsls	r3, r1, #5
 80025d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025dc:	0142      	lsls	r2, r0, #5
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	1b00      	subs	r0, r0, r4
 80025e4:	eb61 0105 	sbc.w	r1, r1, r5
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	018b      	lsls	r3, r1, #6
 80025f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f6:	0182      	lsls	r2, r0, #6
 80025f8:	1a12      	subs	r2, r2, r0
 80025fa:	eb63 0301 	sbc.w	r3, r3, r1
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	00d9      	lsls	r1, r3, #3
 8002608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800260c:	00d0      	lsls	r0, r2, #3
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	1912      	adds	r2, r2, r4
 8002614:	eb45 0303 	adc.w	r3, r5, r3
 8002618:	f04f 0000 	mov.w	r0, #0
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	0299      	lsls	r1, r3, #10
 8002622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002626:	0290      	lsls	r0, r2, #10
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	f7fd fe22 	bl	8000280 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_GetSysClockFreq+0x160>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	60bb      	str	r3, [r7, #8]
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_GetSysClockFreq+0x164>)
 8002662:	60bb      	str	r3, [r7, #8]
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	68bb      	ldr	r3, [r7, #8]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bdb0      	pop	{r4, r5, r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	00f42400 	.word	0x00f42400
 8002678:	017d7840 	.word	0x017d7840

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000020 	.word	0x20000020

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	080040f4 	.word	0x080040f4

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffdc 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	080040f4 	.word	0x080040f4

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e041      	b.n	800277a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe faec 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f000 fa96 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d001      	beq.n	800279c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e04e      	b.n	800283a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_TIM_Base_Start_IT+0xc4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d022      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c6:	d01d      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_TIM_Base_Start_IT+0xc8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d018      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_TIM_Base_Start_IT+0xcc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_TIM_Base_Start_IT+0xd0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00e      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_TIM_Base_Start_IT+0xd4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d009      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_TIM_Base_Start_IT+0xd8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x80>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_TIM_Base_Start_IT+0xdc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d111      	bne.n	8002828 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b06      	cmp	r3, #6
 8002814:	d010      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002826:	e007      	b.n	8002838 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40010400 	.word	0x40010400
 800285c:	40014000 	.word	0x40014000
 8002860:	40001800 	.word	0x40001800

08002864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0202 	mvn.w	r2, #2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9b5 	bl	8002c16 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f9a7 	bl	8002c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f9b8 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0204 	mvn.w	r2, #4
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f98b 	bl	8002c16 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f97d 	bl	8002c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f98e 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b08      	cmp	r3, #8
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b08      	cmp	r3, #8
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0208 	mvn.w	r2, #8
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f961 	bl	8002c16 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f953 	bl	8002c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f964 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b10      	cmp	r3, #16
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b10      	cmp	r3, #16
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0210 	mvn.w	r2, #16
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2208      	movs	r2, #8
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f937 	bl	8002c16 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f929 	bl	8002c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f93a 	bl	8002c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0201 	mvn.w	r2, #1
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f8f4 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d10e      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d107      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fae0 	bl	8002fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8ff 	bl	8002c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0220 	mvn.w	r2, #32
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 faaa 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_ConfigClockSource+0x1c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e0b4      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0x186>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac8:	d03e      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0xd4>
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ace:	f200 8087 	bhi.w	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	f000 8086 	beq.w	8002be6 <HAL_TIM_ConfigClockSource+0x172>
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	d87f      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b70      	cmp	r3, #112	; 0x70
 8002ae2:	d01a      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0xa6>
 8002ae4:	2b70      	cmp	r3, #112	; 0x70
 8002ae6:	d87b      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b60      	cmp	r3, #96	; 0x60
 8002aea:	d050      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x11a>
 8002aec:	2b60      	cmp	r3, #96	; 0x60
 8002aee:	d877      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b50      	cmp	r3, #80	; 0x50
 8002af2:	d03c      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0xfa>
 8002af4:	2b50      	cmp	r3, #80	; 0x50
 8002af6:	d873      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d058      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x13a>
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d86f      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b30      	cmp	r3, #48	; 0x30
 8002b02:	d064      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x15a>
 8002b04:	2b30      	cmp	r3, #48	; 0x30
 8002b06:	d86b      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d060      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x15a>
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d867      	bhi.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d05c      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x15a>
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d05a      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x15a>
 8002b18:	e062      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f000 f9ad 	bl	8002e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
      break;
 8002b46:	e04f      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f000 f996 	bl	8002e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6a:	609a      	str	r2, [r3, #8]
      break;
 8002b6c:	e03c      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f000 f90a 	bl	8002d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2150      	movs	r1, #80	; 0x50
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f963 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002b8c:	e02c      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f929 	bl	8002df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2160      	movs	r1, #96	; 0x60
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f953 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e01c      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 f8ea 	bl	8002d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2140      	movs	r1, #64	; 0x40
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f943 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e00c      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 f93a 	bl	8002e52 <TIM_ITRx_SetConfig>
      break;
 8002bde:	e003      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e000      	b.n	8002be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d00f      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <TIM_Base_SetConfig+0x118>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3c      	ldr	r2, [pc, #240]	; (8002d70 <TIM_Base_SetConfig+0x11c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <TIM_Base_SetConfig+0x120>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d108      	bne.n	8002ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d027      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <TIM_Base_SetConfig+0x118>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d023      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <TIM_Base_SetConfig+0x11c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <TIM_Base_SetConfig+0x120>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d017      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <TIM_Base_SetConfig+0x128>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <TIM_Base_SetConfig+0x12c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <TIM_Base_SetConfig+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <TIM_Base_SetConfig+0x134>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <TIM_Base_SetConfig+0x138>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0xb2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <TIM_Base_SetConfig+0x13c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <TIM_Base_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0xf8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <TIM_Base_SetConfig+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	40001800 	.word	0x40001800
 8002d8c:	40001c00 	.word	0x40001c00
 8002d90:	40002000 	.word	0x40002000

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	031b      	lsls	r3, r3, #12
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f043 0307 	orr.w	r3, r3, #7
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e05a      	b.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d01d      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10c      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40001800 	.word	0x40001800

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e03f      	b.n	800307a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fe92 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9cb 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b08a      	sub	sp, #40	; 0x28
 8003086:	af02      	add	r7, sp, #8
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d17c      	bne.n	800319c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_Transmit+0x2c>
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e075      	b.n	800319e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Transmit+0x3e>
 80030bc:	2302      	movs	r3, #2
 80030be:	e06e      	b.n	800319e <HAL_UART_Transmit+0x11c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d6:	f7fd ff9f 	bl	8001018 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d108      	bne.n	8003104 <HAL_UART_Transmit+0x82>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e003      	b.n	800310c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003114:	e02a      	b.n	800316c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f8e2 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e036      	b.n	800319e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	3302      	adds	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e007      	b.n	800315e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1cf      	bne.n	8003116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8b2 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08a      	sub	sp, #40	; 0x28
 80031aa:	af02      	add	r7, sp, #8
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	f040 808c 	bne.w	80032e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Receive+0x2e>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e084      	b.n	80032e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Receive+0x40>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e07d      	b.n	80032e2 <HAL_UART_Receive+0x13c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2222      	movs	r2, #34	; 0x22
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003202:	f7fd ff09 	bl	8001018 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d108      	bne.n	8003230 <HAL_UART_Receive+0x8a>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003240:	e043      	b.n	80032ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	2120      	movs	r1, #32
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f84c 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e042      	b.n	80032e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326e:	b29a      	uxth	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3302      	adds	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e01f      	b.n	80032bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d007      	beq.n	8003296 <HAL_UART_Receive+0xf0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_UART_Receive+0xfe>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e008      	b.n	80032b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1b6      	bne.n	8003242 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b090      	sub	sp, #64	; 0x40
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e050      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003302:	d04c      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fd fe85 	bl	8001018 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	429a      	cmp	r2, r3
 8003318:	d241      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333a:	637a      	str	r2, [r7, #52]	; 0x34
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	613b      	str	r3, [r7, #16]
   return(result);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336e:	623a      	str	r2, [r7, #32]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61bb      	str	r3, [r7, #24]
   return(result);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d09f      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3740      	adds	r7, #64	; 0x40
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	b09f      	sub	sp, #124	; 0x7c
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	68d9      	ldr	r1, [r3, #12]
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	ea40 0301 	orr.w	r3, r0, r1
 80033e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4313      	orrs	r3, r2
 8003400:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800340c:	f021 010c 	bic.w	r1, r1, #12
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003416:	430b      	orrs	r3, r1
 8003418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	6999      	ldr	r1, [r3, #24]
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	ea40 0301 	orr.w	r3, r0, r1
 8003430:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4bc5      	ldr	r3, [pc, #788]	; (800374c <UART_SetConfig+0x384>)
 8003438:	429a      	cmp	r2, r3
 800343a:	d004      	beq.n	8003446 <UART_SetConfig+0x7e>
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4bc3      	ldr	r3, [pc, #780]	; (8003750 <UART_SetConfig+0x388>)
 8003442:	429a      	cmp	r2, r3
 8003444:	d103      	bne.n	800344e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003446:	f7ff f939 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 800344a:	6778      	str	r0, [r7, #116]	; 0x74
 800344c:	e002      	b.n	8003454 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800344e:	f7ff f921 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003452:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	f040 80b6 	bne.w	80035cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003462:	461c      	mov	r4, r3
 8003464:	f04f 0500 	mov.w	r5, #0
 8003468:	4622      	mov	r2, r4
 800346a:	462b      	mov	r3, r5
 800346c:	1891      	adds	r1, r2, r2
 800346e:	6439      	str	r1, [r7, #64]	; 0x40
 8003470:	415b      	adcs	r3, r3
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
 8003474:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003478:	1912      	adds	r2, r2, r4
 800347a:	eb45 0303 	adc.w	r3, r5, r3
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	00d9      	lsls	r1, r3, #3
 8003488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800348c:	00d0      	lsls	r0, r2, #3
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	1911      	adds	r1, r2, r4
 8003494:	6639      	str	r1, [r7, #96]	; 0x60
 8003496:	416b      	adcs	r3, r5
 8003498:	667b      	str	r3, [r7, #100]	; 0x64
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034a8:	415b      	adcs	r3, r3
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034b4:	f7fc fee4 	bl	8000280 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <UART_SetConfig+0x38c>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011e      	lsls	r6, r3, #4
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	461c      	mov	r4, r3
 80034ca:	f04f 0500 	mov.w	r5, #0
 80034ce:	4622      	mov	r2, r4
 80034d0:	462b      	mov	r3, r5
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	6339      	str	r1, [r7, #48]	; 0x30
 80034d6:	415b      	adcs	r3, r3
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034de:	1912      	adds	r2, r2, r4
 80034e0:	eb45 0303 	adc.w	r3, r5, r3
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	00d9      	lsls	r1, r3, #3
 80034ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034f2:	00d0      	lsls	r0, r2, #3
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	1911      	adds	r1, r2, r4
 80034fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80034fc:	416b      	adcs	r3, r5
 80034fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	461a      	mov	r2, r3
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	1891      	adds	r1, r2, r2
 800350c:	62b9      	str	r1, [r7, #40]	; 0x28
 800350e:	415b      	adcs	r3, r3
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003516:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800351a:	f7fc feb1 	bl	8000280 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <UART_SetConfig+0x38c>)
 8003524:	fba3 1302 	umull	r1, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	2164      	movs	r1, #100	; 0x64
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	3332      	adds	r3, #50	; 0x32
 8003536:	4a87      	ldr	r2, [pc, #540]	; (8003754 <UART_SetConfig+0x38c>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003544:	441e      	add	r6, r3
 8003546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003548:	4618      	mov	r0, r3
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	1894      	adds	r4, r2, r2
 8003554:	623c      	str	r4, [r7, #32]
 8003556:	415b      	adcs	r3, r3
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800355e:	1812      	adds	r2, r2, r0
 8003560:	eb41 0303 	adc.w	r3, r1, r3
 8003564:	f04f 0400 	mov.w	r4, #0
 8003568:	f04f 0500 	mov.w	r5, #0
 800356c:	00dd      	lsls	r5, r3, #3
 800356e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003572:	00d4      	lsls	r4, r2, #3
 8003574:	4622      	mov	r2, r4
 8003576:	462b      	mov	r3, r5
 8003578:	1814      	adds	r4, r2, r0
 800357a:	653c      	str	r4, [r7, #80]	; 0x50
 800357c:	414b      	adcs	r3, r1
 800357e:	657b      	str	r3, [r7, #84]	; 0x54
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	461a      	mov	r2, r3
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	1891      	adds	r1, r2, r2
 800358c:	61b9      	str	r1, [r7, #24]
 800358e:	415b      	adcs	r3, r3
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003596:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <UART_SetConfig+0x38c>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a67      	ldr	r2, [pc, #412]	; (8003754 <UART_SetConfig+0x38c>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4432      	add	r2, r6
 80035c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ca:	e0b9      	b.n	8003740 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ce:	461c      	mov	r4, r3
 80035d0:	f04f 0500 	mov.w	r5, #0
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	1891      	adds	r1, r2, r2
 80035da:	6139      	str	r1, [r7, #16]
 80035dc:	415b      	adcs	r3, r3
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035e4:	1912      	adds	r2, r2, r4
 80035e6:	eb45 0303 	adc.w	r3, r5, r3
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	00d9      	lsls	r1, r3, #3
 80035f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f8:	00d0      	lsls	r0, r2, #3
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	eb12 0804 	adds.w	r8, r2, r4
 8003602:	eb43 0905 	adc.w	r9, r3, r5
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	008b      	lsls	r3, r1, #2
 800361a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800361e:	0082      	lsls	r2, r0, #2
 8003620:	4640      	mov	r0, r8
 8003622:	4649      	mov	r1, r9
 8003624:	f7fc fe2c 	bl	8000280 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4b49      	ldr	r3, [pc, #292]	; (8003754 <UART_SetConfig+0x38c>)
 800362e:	fba3 2302 	umull	r2, r3, r3, r2
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	011e      	lsls	r6, r3, #4
 8003636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003638:	4618      	mov	r0, r3
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	1894      	adds	r4, r2, r2
 8003644:	60bc      	str	r4, [r7, #8]
 8003646:	415b      	adcs	r3, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800364e:	1812      	adds	r2, r2, r0
 8003650:	eb41 0303 	adc.w	r3, r1, r3
 8003654:	f04f 0400 	mov.w	r4, #0
 8003658:	f04f 0500 	mov.w	r5, #0
 800365c:	00dd      	lsls	r5, r3, #3
 800365e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003662:	00d4      	lsls	r4, r2, #3
 8003664:	4622      	mov	r2, r4
 8003666:	462b      	mov	r3, r5
 8003668:	1814      	adds	r4, r2, r0
 800366a:	64bc      	str	r4, [r7, #72]	; 0x48
 800366c:	414b      	adcs	r3, r1
 800366e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003688:	0082      	lsls	r2, r0, #2
 800368a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800368e:	f7fc fdf7 	bl	8000280 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <UART_SetConfig+0x38c>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	; 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	3332      	adds	r3, #50	; 0x32
 80036aa:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <UART_SetConfig+0x38c>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b6:	441e      	add	r6, r3
 80036b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ba:	4618      	mov	r0, r3
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	1894      	adds	r4, r2, r2
 80036c6:	603c      	str	r4, [r7, #0]
 80036c8:	415b      	adcs	r3, r3
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d0:	1812      	adds	r2, r2, r0
 80036d2:	eb41 0303 	adc.w	r3, r1, r3
 80036d6:	f04f 0400 	mov.w	r4, #0
 80036da:	f04f 0500 	mov.w	r5, #0
 80036de:	00dd      	lsls	r5, r3, #3
 80036e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036e4:	00d4      	lsls	r4, r2, #3
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	eb12 0a00 	adds.w	sl, r2, r0
 80036ee:	eb43 0b01 	adc.w	fp, r3, r1
 80036f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	008b      	lsls	r3, r1, #2
 8003706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800370a:	0082      	lsls	r2, r0, #2
 800370c:	4650      	mov	r0, sl
 800370e:	4659      	mov	r1, fp
 8003710:	f7fc fdb6 	bl	8000280 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <UART_SetConfig+0x38c>)
 800371a:	fba3 1302 	umull	r1, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	3332      	adds	r3, #50	; 0x32
 800372c:	4a09      	ldr	r2, [pc, #36]	; (8003754 <UART_SetConfig+0x38c>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4432      	add	r2, r6
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	377c      	adds	r7, #124	; 0x7c
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374a:	bf00      	nop
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	51eb851f 	.word	0x51eb851f

08003758 <__errno>:
 8003758:	4b01      	ldr	r3, [pc, #4]	; (8003760 <__errno+0x8>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	2000002c 	.word	0x2000002c

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4d0d      	ldr	r5, [pc, #52]	; (800379c <__libc_init_array+0x38>)
 8003768:	4c0d      	ldr	r4, [pc, #52]	; (80037a0 <__libc_init_array+0x3c>)
 800376a:	1b64      	subs	r4, r4, r5
 800376c:	10a4      	asrs	r4, r4, #2
 800376e:	2600      	movs	r6, #0
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	4d0b      	ldr	r5, [pc, #44]	; (80037a4 <__libc_init_array+0x40>)
 8003776:	4c0c      	ldr	r4, [pc, #48]	; (80037a8 <__libc_init_array+0x44>)
 8003778:	f000 fc4e 	bl	8004018 <_init>
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	2600      	movs	r6, #0
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	f855 3b04 	ldr.w	r3, [r5], #4
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	f855 3b04 	ldr.w	r3, [r5], #4
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	08004138 	.word	0x08004138
 80037a0:	08004138 	.word	0x08004138
 80037a4:	08004138 	.word	0x08004138
 80037a8:	0800413c 	.word	0x0800413c

080037ac <memset>:
 80037ac:	4402      	add	r2, r0
 80037ae:	4603      	mov	r3, r0
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d100      	bne.n	80037b6 <memset+0xa>
 80037b4:	4770      	bx	lr
 80037b6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ba:	e7f9      	b.n	80037b0 <memset+0x4>

080037bc <siprintf>:
 80037bc:	b40e      	push	{r1, r2, r3}
 80037be:	b500      	push	{lr}
 80037c0:	b09c      	sub	sp, #112	; 0x70
 80037c2:	ab1d      	add	r3, sp, #116	; 0x74
 80037c4:	9002      	str	r0, [sp, #8]
 80037c6:	9006      	str	r0, [sp, #24]
 80037c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037cc:	4809      	ldr	r0, [pc, #36]	; (80037f4 <siprintf+0x38>)
 80037ce:	9107      	str	r1, [sp, #28]
 80037d0:	9104      	str	r1, [sp, #16]
 80037d2:	4909      	ldr	r1, [pc, #36]	; (80037f8 <siprintf+0x3c>)
 80037d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d8:	9105      	str	r1, [sp, #20]
 80037da:	6800      	ldr	r0, [r0, #0]
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	a902      	add	r1, sp, #8
 80037e0:	f000 f868 	bl	80038b4 <_svfiprintf_r>
 80037e4:	9b02      	ldr	r3, [sp, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	b01c      	add	sp, #112	; 0x70
 80037ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f0:	b003      	add	sp, #12
 80037f2:	4770      	bx	lr
 80037f4:	2000002c 	.word	0x2000002c
 80037f8:	ffff0208 	.word	0xffff0208

080037fc <__ssputs_r>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	688e      	ldr	r6, [r1, #8]
 8003802:	429e      	cmp	r6, r3
 8003804:	4682      	mov	sl, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4690      	mov	r8, r2
 800380a:	461f      	mov	r7, r3
 800380c:	d838      	bhi.n	8003880 <__ssputs_r+0x84>
 800380e:	898a      	ldrh	r2, [r1, #12]
 8003810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003814:	d032      	beq.n	800387c <__ssputs_r+0x80>
 8003816:	6825      	ldr	r5, [r4, #0]
 8003818:	6909      	ldr	r1, [r1, #16]
 800381a:	eba5 0901 	sub.w	r9, r5, r1
 800381e:	6965      	ldr	r5, [r4, #20]
 8003820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003828:	3301      	adds	r3, #1
 800382a:	444b      	add	r3, r9
 800382c:	106d      	asrs	r5, r5, #1
 800382e:	429d      	cmp	r5, r3
 8003830:	bf38      	it	cc
 8003832:	461d      	movcc	r5, r3
 8003834:	0553      	lsls	r3, r2, #21
 8003836:	d531      	bpl.n	800389c <__ssputs_r+0xa0>
 8003838:	4629      	mov	r1, r5
 800383a:	f000 fb47 	bl	8003ecc <_malloc_r>
 800383e:	4606      	mov	r6, r0
 8003840:	b950      	cbnz	r0, 8003858 <__ssputs_r+0x5c>
 8003842:	230c      	movs	r3, #12
 8003844:	f8ca 3000 	str.w	r3, [sl]
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	6921      	ldr	r1, [r4, #16]
 800385a:	464a      	mov	r2, r9
 800385c:	f000 fabe 	bl	8003ddc <memcpy>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	6126      	str	r6, [r4, #16]
 800386e:	6165      	str	r5, [r4, #20]
 8003870:	444e      	add	r6, r9
 8003872:	eba5 0509 	sub.w	r5, r5, r9
 8003876:	6026      	str	r6, [r4, #0]
 8003878:	60a5      	str	r5, [r4, #8]
 800387a:	463e      	mov	r6, r7
 800387c:	42be      	cmp	r6, r7
 800387e:	d900      	bls.n	8003882 <__ssputs_r+0x86>
 8003880:	463e      	mov	r6, r7
 8003882:	4632      	mov	r2, r6
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	4641      	mov	r1, r8
 8003888:	f000 fab6 	bl	8003df8 <memmove>
 800388c:	68a3      	ldr	r3, [r4, #8]
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	1b9b      	subs	r3, r3, r6
 8003892:	4432      	add	r2, r6
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	6022      	str	r2, [r4, #0]
 8003898:	2000      	movs	r0, #0
 800389a:	e7db      	b.n	8003854 <__ssputs_r+0x58>
 800389c:	462a      	mov	r2, r5
 800389e:	f000 fb6f 	bl	8003f80 <_realloc_r>
 80038a2:	4606      	mov	r6, r0
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1e1      	bne.n	800386c <__ssputs_r+0x70>
 80038a8:	6921      	ldr	r1, [r4, #16]
 80038aa:	4650      	mov	r0, sl
 80038ac:	f000 fabe 	bl	8003e2c <_free_r>
 80038b0:	e7c7      	b.n	8003842 <__ssputs_r+0x46>
	...

080038b4 <_svfiprintf_r>:
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b8:	4698      	mov	r8, r3
 80038ba:	898b      	ldrh	r3, [r1, #12]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	b09d      	sub	sp, #116	; 0x74
 80038c0:	4607      	mov	r7, r0
 80038c2:	460d      	mov	r5, r1
 80038c4:	4614      	mov	r4, r2
 80038c6:	d50e      	bpl.n	80038e6 <_svfiprintf_r+0x32>
 80038c8:	690b      	ldr	r3, [r1, #16]
 80038ca:	b963      	cbnz	r3, 80038e6 <_svfiprintf_r+0x32>
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	f000 fafd 	bl	8003ecc <_malloc_r>
 80038d2:	6028      	str	r0, [r5, #0]
 80038d4:	6128      	str	r0, [r5, #16]
 80038d6:	b920      	cbnz	r0, 80038e2 <_svfiprintf_r+0x2e>
 80038d8:	230c      	movs	r3, #12
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e0:	e0d1      	b.n	8003a86 <_svfiprintf_r+0x1d2>
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	616b      	str	r3, [r5, #20]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ea:	2320      	movs	r3, #32
 80038ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f4:	2330      	movs	r3, #48	; 0x30
 80038f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003aa0 <_svfiprintf_r+0x1ec>
 80038fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038fe:	f04f 0901 	mov.w	r9, #1
 8003902:	4623      	mov	r3, r4
 8003904:	469a      	mov	sl, r3
 8003906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800390a:	b10a      	cbz	r2, 8003910 <_svfiprintf_r+0x5c>
 800390c:	2a25      	cmp	r2, #37	; 0x25
 800390e:	d1f9      	bne.n	8003904 <_svfiprintf_r+0x50>
 8003910:	ebba 0b04 	subs.w	fp, sl, r4
 8003914:	d00b      	beq.n	800392e <_svfiprintf_r+0x7a>
 8003916:	465b      	mov	r3, fp
 8003918:	4622      	mov	r2, r4
 800391a:	4629      	mov	r1, r5
 800391c:	4638      	mov	r0, r7
 800391e:	f7ff ff6d 	bl	80037fc <__ssputs_r>
 8003922:	3001      	adds	r0, #1
 8003924:	f000 80aa 	beq.w	8003a7c <_svfiprintf_r+0x1c8>
 8003928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800392a:	445a      	add	r2, fp
 800392c:	9209      	str	r2, [sp, #36]	; 0x24
 800392e:	f89a 3000 	ldrb.w	r3, [sl]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80a2 	beq.w	8003a7c <_svfiprintf_r+0x1c8>
 8003938:	2300      	movs	r3, #0
 800393a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003942:	f10a 0a01 	add.w	sl, sl, #1
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	9307      	str	r3, [sp, #28]
 800394a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800394e:	931a      	str	r3, [sp, #104]	; 0x68
 8003950:	4654      	mov	r4, sl
 8003952:	2205      	movs	r2, #5
 8003954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003958:	4851      	ldr	r0, [pc, #324]	; (8003aa0 <_svfiprintf_r+0x1ec>)
 800395a:	f7fc fc41 	bl	80001e0 <memchr>
 800395e:	9a04      	ldr	r2, [sp, #16]
 8003960:	b9d8      	cbnz	r0, 800399a <_svfiprintf_r+0xe6>
 8003962:	06d0      	lsls	r0, r2, #27
 8003964:	bf44      	itt	mi
 8003966:	2320      	movmi	r3, #32
 8003968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800396c:	0711      	lsls	r1, r2, #28
 800396e:	bf44      	itt	mi
 8003970:	232b      	movmi	r3, #43	; 0x2b
 8003972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003976:	f89a 3000 	ldrb.w	r3, [sl]
 800397a:	2b2a      	cmp	r3, #42	; 0x2a
 800397c:	d015      	beq.n	80039aa <_svfiprintf_r+0xf6>
 800397e:	9a07      	ldr	r2, [sp, #28]
 8003980:	4654      	mov	r4, sl
 8003982:	2000      	movs	r0, #0
 8003984:	f04f 0c0a 	mov.w	ip, #10
 8003988:	4621      	mov	r1, r4
 800398a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800398e:	3b30      	subs	r3, #48	; 0x30
 8003990:	2b09      	cmp	r3, #9
 8003992:	d94e      	bls.n	8003a32 <_svfiprintf_r+0x17e>
 8003994:	b1b0      	cbz	r0, 80039c4 <_svfiprintf_r+0x110>
 8003996:	9207      	str	r2, [sp, #28]
 8003998:	e014      	b.n	80039c4 <_svfiprintf_r+0x110>
 800399a:	eba0 0308 	sub.w	r3, r0, r8
 800399e:	fa09 f303 	lsl.w	r3, r9, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	9304      	str	r3, [sp, #16]
 80039a6:	46a2      	mov	sl, r4
 80039a8:	e7d2      	b.n	8003950 <_svfiprintf_r+0x9c>
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	1d19      	adds	r1, r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	9103      	str	r1, [sp, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfbb      	ittet	lt
 80039b6:	425b      	neglt	r3, r3
 80039b8:	f042 0202 	orrlt.w	r2, r2, #2
 80039bc:	9307      	strge	r3, [sp, #28]
 80039be:	9307      	strlt	r3, [sp, #28]
 80039c0:	bfb8      	it	lt
 80039c2:	9204      	strlt	r2, [sp, #16]
 80039c4:	7823      	ldrb	r3, [r4, #0]
 80039c6:	2b2e      	cmp	r3, #46	; 0x2e
 80039c8:	d10c      	bne.n	80039e4 <_svfiprintf_r+0x130>
 80039ca:	7863      	ldrb	r3, [r4, #1]
 80039cc:	2b2a      	cmp	r3, #42	; 0x2a
 80039ce:	d135      	bne.n	8003a3c <_svfiprintf_r+0x188>
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	9203      	str	r2, [sp, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bfb8      	it	lt
 80039dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039e0:	3402      	adds	r4, #2
 80039e2:	9305      	str	r3, [sp, #20]
 80039e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ab0 <_svfiprintf_r+0x1fc>
 80039e8:	7821      	ldrb	r1, [r4, #0]
 80039ea:	2203      	movs	r2, #3
 80039ec:	4650      	mov	r0, sl
 80039ee:	f7fc fbf7 	bl	80001e0 <memchr>
 80039f2:	b140      	cbz	r0, 8003a06 <_svfiprintf_r+0x152>
 80039f4:	2340      	movs	r3, #64	; 0x40
 80039f6:	eba0 000a 	sub.w	r0, r0, sl
 80039fa:	fa03 f000 	lsl.w	r0, r3, r0
 80039fe:	9b04      	ldr	r3, [sp, #16]
 8003a00:	4303      	orrs	r3, r0
 8003a02:	3401      	adds	r4, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0a:	4826      	ldr	r0, [pc, #152]	; (8003aa4 <_svfiprintf_r+0x1f0>)
 8003a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a10:	2206      	movs	r2, #6
 8003a12:	f7fc fbe5 	bl	80001e0 <memchr>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d038      	beq.n	8003a8c <_svfiprintf_r+0x1d8>
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <_svfiprintf_r+0x1f4>)
 8003a1c:	bb1b      	cbnz	r3, 8003a66 <_svfiprintf_r+0x1b2>
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	3307      	adds	r3, #7
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	3308      	adds	r3, #8
 8003a28:	9303      	str	r3, [sp, #12]
 8003a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2c:	4433      	add	r3, r6
 8003a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a30:	e767      	b.n	8003902 <_svfiprintf_r+0x4e>
 8003a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a36:	460c      	mov	r4, r1
 8003a38:	2001      	movs	r0, #1
 8003a3a:	e7a5      	b.n	8003988 <_svfiprintf_r+0xd4>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	3401      	adds	r4, #1
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	4619      	mov	r1, r3
 8003a44:	f04f 0c0a 	mov.w	ip, #10
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a4e:	3a30      	subs	r2, #48	; 0x30
 8003a50:	2a09      	cmp	r2, #9
 8003a52:	d903      	bls.n	8003a5c <_svfiprintf_r+0x1a8>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0c5      	beq.n	80039e4 <_svfiprintf_r+0x130>
 8003a58:	9105      	str	r1, [sp, #20]
 8003a5a:	e7c3      	b.n	80039e4 <_svfiprintf_r+0x130>
 8003a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a60:	4604      	mov	r4, r0
 8003a62:	2301      	movs	r3, #1
 8003a64:	e7f0      	b.n	8003a48 <_svfiprintf_r+0x194>
 8003a66:	ab03      	add	r3, sp, #12
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <_svfiprintf_r+0x1f8>)
 8003a6e:	a904      	add	r1, sp, #16
 8003a70:	4638      	mov	r0, r7
 8003a72:	f3af 8000 	nop.w
 8003a76:	1c42      	adds	r2, r0, #1
 8003a78:	4606      	mov	r6, r0
 8003a7a:	d1d6      	bne.n	8003a2a <_svfiprintf_r+0x176>
 8003a7c:	89ab      	ldrh	r3, [r5, #12]
 8003a7e:	065b      	lsls	r3, r3, #25
 8003a80:	f53f af2c 	bmi.w	80038dc <_svfiprintf_r+0x28>
 8003a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a86:	b01d      	add	sp, #116	; 0x74
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	462a      	mov	r2, r5
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <_svfiprintf_r+0x1f8>)
 8003a94:	a904      	add	r1, sp, #16
 8003a96:	4638      	mov	r0, r7
 8003a98:	f000 f87a 	bl	8003b90 <_printf_i>
 8003a9c:	e7eb      	b.n	8003a76 <_svfiprintf_r+0x1c2>
 8003a9e:	bf00      	nop
 8003aa0:	080040fc 	.word	0x080040fc
 8003aa4:	08004106 	.word	0x08004106
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	080037fd 	.word	0x080037fd
 8003ab0:	08004102 	.word	0x08004102

08003ab4 <_printf_common>:
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	4616      	mov	r6, r2
 8003aba:	4699      	mov	r9, r3
 8003abc:	688a      	ldr	r2, [r1, #8]
 8003abe:	690b      	ldr	r3, [r1, #16]
 8003ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bfb8      	it	lt
 8003ac8:	4613      	movlt	r3, r2
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	b10a      	cbz	r2, 8003ada <_printf_common+0x26>
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0699      	lsls	r1, r3, #26
 8003ade:	bf42      	ittt	mi
 8003ae0:	6833      	ldrmi	r3, [r6, #0]
 8003ae2:	3302      	addmi	r3, #2
 8003ae4:	6033      	strmi	r3, [r6, #0]
 8003ae6:	6825      	ldr	r5, [r4, #0]
 8003ae8:	f015 0506 	ands.w	r5, r5, #6
 8003aec:	d106      	bne.n	8003afc <_printf_common+0x48>
 8003aee:	f104 0a19 	add.w	sl, r4, #25
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	6832      	ldr	r2, [r6, #0]
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	42ab      	cmp	r3, r5
 8003afa:	dc26      	bgt.n	8003b4a <_printf_common+0x96>
 8003afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b00:	1e13      	subs	r3, r2, #0
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	bf18      	it	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	0692      	lsls	r2, r2, #26
 8003b0a:	d42b      	bmi.n	8003b64 <_printf_common+0xb0>
 8003b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b10:	4649      	mov	r1, r9
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d01e      	beq.n	8003b58 <_printf_common+0xa4>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	68e5      	ldr	r5, [r4, #12]
 8003b1e:	6832      	ldr	r2, [r6, #0]
 8003b20:	f003 0306 	and.w	r3, r3, #6
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	bf08      	it	eq
 8003b28:	1aad      	subeq	r5, r5, r2
 8003b2a:	68a3      	ldr	r3, [r4, #8]
 8003b2c:	6922      	ldr	r2, [r4, #16]
 8003b2e:	bf0c      	ite	eq
 8003b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b34:	2500      	movne	r5, #0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	bfc4      	itt	gt
 8003b3a:	1a9b      	subgt	r3, r3, r2
 8003b3c:	18ed      	addgt	r5, r5, r3
 8003b3e:	2600      	movs	r6, #0
 8003b40:	341a      	adds	r4, #26
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d11a      	bne.n	8003b7c <_printf_common+0xc8>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e008      	b.n	8003b5c <_printf_common+0xa8>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4638      	mov	r0, r7
 8003b52:	47c0      	blx	r8
 8003b54:	3001      	adds	r0, #1
 8003b56:	d103      	bne.n	8003b60 <_printf_common+0xac>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	3501      	adds	r5, #1
 8003b62:	e7c6      	b.n	8003af2 <_printf_common+0x3e>
 8003b64:	18e1      	adds	r1, r4, r3
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	2030      	movs	r0, #48	; 0x30
 8003b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b6e:	4422      	add	r2, r4
 8003b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b78:	3302      	adds	r3, #2
 8003b7a:	e7c7      	b.n	8003b0c <_printf_common+0x58>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4622      	mov	r2, r4
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0e6      	beq.n	8003b58 <_printf_common+0xa4>
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7d9      	b.n	8003b42 <_printf_common+0x8e>
	...

08003b90 <_printf_i>:
 8003b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	460c      	mov	r4, r1
 8003b96:	4691      	mov	r9, r2
 8003b98:	7e27      	ldrb	r7, [r4, #24]
 8003b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b9c:	2f78      	cmp	r7, #120	; 0x78
 8003b9e:	4680      	mov	r8, r0
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba6:	d807      	bhi.n	8003bb8 <_printf_i+0x28>
 8003ba8:	2f62      	cmp	r7, #98	; 0x62
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x32>
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	f000 80d8 	beq.w	8003d62 <_printf_i+0x1d2>
 8003bb2:	2f58      	cmp	r7, #88	; 0x58
 8003bb4:	f000 80a3 	beq.w	8003cfe <_printf_i+0x16e>
 8003bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc0:	e03a      	b.n	8003c38 <_printf_i+0xa8>
 8003bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bc6:	2b15      	cmp	r3, #21
 8003bc8:	d8f6      	bhi.n	8003bb8 <_printf_i+0x28>
 8003bca:	a001      	add	r0, pc, #4	; (adr r0, 8003bd0 <_printf_i+0x40>)
 8003bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003bb9 	.word	0x08003bb9
 8003bdc:	08003bb9 	.word	0x08003bb9
 8003be0:	08003bb9 	.word	0x08003bb9
 8003be4:	08003bb9 	.word	0x08003bb9
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003bb9 	.word	0x08003bb9
 8003bf0:	08003bb9 	.word	0x08003bb9
 8003bf4:	08003bb9 	.word	0x08003bb9
 8003bf8:	08003bb9 	.word	0x08003bb9
 8003bfc:	08003d49 	.word	0x08003d49
 8003c00:	08003c6d 	.word	0x08003c6d
 8003c04:	08003d2b 	.word	0x08003d2b
 8003c08:	08003bb9 	.word	0x08003bb9
 8003c0c:	08003bb9 	.word	0x08003bb9
 8003c10:	08003d6b 	.word	0x08003d6b
 8003c14:	08003bb9 	.word	0x08003bb9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003bb9 	.word	0x08003bb9
 8003c20:	08003bb9 	.word	0x08003bb9
 8003c24:	08003d33 	.word	0x08003d33
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	600a      	str	r2, [r1, #0]
 8003c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0a3      	b.n	8003d84 <_printf_i+0x1f4>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	6808      	ldr	r0, [r1, #0]
 8003c40:	062e      	lsls	r6, r5, #24
 8003c42:	f100 0304 	add.w	r3, r0, #4
 8003c46:	d50a      	bpl.n	8003c5e <_printf_i+0xce>
 8003c48:	6805      	ldr	r5, [r0, #0]
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	da03      	bge.n	8003c58 <_printf_i+0xc8>
 8003c50:	232d      	movs	r3, #45	; 0x2d
 8003c52:	426d      	negs	r5, r5
 8003c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c58:	485e      	ldr	r0, [pc, #376]	; (8003dd4 <_printf_i+0x244>)
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	e019      	b.n	8003c92 <_printf_i+0x102>
 8003c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c62:	6805      	ldr	r5, [r0, #0]
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	bf18      	it	ne
 8003c68:	b22d      	sxthne	r5, r5
 8003c6a:	e7ef      	b.n	8003c4c <_printf_i+0xbc>
 8003c6c:	680b      	ldr	r3, [r1, #0]
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	1d18      	adds	r0, r3, #4
 8003c72:	6008      	str	r0, [r1, #0]
 8003c74:	0628      	lsls	r0, r5, #24
 8003c76:	d501      	bpl.n	8003c7c <_printf_i+0xec>
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	e002      	b.n	8003c82 <_printf_i+0xf2>
 8003c7c:	0669      	lsls	r1, r5, #25
 8003c7e:	d5fb      	bpl.n	8003c78 <_printf_i+0xe8>
 8003c80:	881d      	ldrh	r5, [r3, #0]
 8003c82:	4854      	ldr	r0, [pc, #336]	; (8003dd4 <_printf_i+0x244>)
 8003c84:	2f6f      	cmp	r7, #111	; 0x6f
 8003c86:	bf0c      	ite	eq
 8003c88:	2308      	moveq	r3, #8
 8003c8a:	230a      	movne	r3, #10
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c92:	6866      	ldr	r6, [r4, #4]
 8003c94:	60a6      	str	r6, [r4, #8]
 8003c96:	2e00      	cmp	r6, #0
 8003c98:	bfa2      	ittt	ge
 8003c9a:	6821      	ldrge	r1, [r4, #0]
 8003c9c:	f021 0104 	bicge.w	r1, r1, #4
 8003ca0:	6021      	strge	r1, [r4, #0]
 8003ca2:	b90d      	cbnz	r5, 8003ca8 <_printf_i+0x118>
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	d04d      	beq.n	8003d44 <_printf_i+0x1b4>
 8003ca8:	4616      	mov	r6, r2
 8003caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cae:	fb03 5711 	mls	r7, r3, r1, r5
 8003cb2:	5dc7      	ldrb	r7, [r0, r7]
 8003cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cb8:	462f      	mov	r7, r5
 8003cba:	42bb      	cmp	r3, r7
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	d9f4      	bls.n	8003caa <_printf_i+0x11a>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d10b      	bne.n	8003cdc <_printf_i+0x14c>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07df      	lsls	r7, r3, #31
 8003cc8:	d508      	bpl.n	8003cdc <_printf_i+0x14c>
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	6861      	ldr	r1, [r4, #4]
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	bfde      	ittt	le
 8003cd2:	2330      	movle	r3, #48	; 0x30
 8003cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003cdc:	1b92      	subs	r2, r2, r6
 8003cde:	6122      	str	r2, [r4, #16]
 8003ce0:	f8cd a000 	str.w	sl, [sp]
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	aa03      	add	r2, sp, #12
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4640      	mov	r0, r8
 8003cec:	f7ff fee2 	bl	8003ab4 <_printf_common>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d14c      	bne.n	8003d8e <_printf_i+0x1fe>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf8:	b004      	add	sp, #16
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	4835      	ldr	r0, [pc, #212]	; (8003dd4 <_printf_i+0x244>)
 8003d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	680e      	ldr	r6, [r1, #0]
 8003d08:	061f      	lsls	r7, r3, #24
 8003d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d0e:	600e      	str	r6, [r1, #0]
 8003d10:	d514      	bpl.n	8003d3c <_printf_i+0x1ac>
 8003d12:	07d9      	lsls	r1, r3, #31
 8003d14:	bf44      	itt	mi
 8003d16:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1a:	6023      	strmi	r3, [r4, #0]
 8003d1c:	b91d      	cbnz	r5, 8003d26 <_printf_i+0x196>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f023 0320 	bic.w	r3, r3, #32
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	2310      	movs	r3, #16
 8003d28:	e7b0      	b.n	8003c8c <_printf_i+0xfc>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	f043 0320 	orr.w	r3, r3, #32
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	2378      	movs	r3, #120	; 0x78
 8003d34:	4828      	ldr	r0, [pc, #160]	; (8003dd8 <_printf_i+0x248>)
 8003d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3a:	e7e3      	b.n	8003d04 <_printf_i+0x174>
 8003d3c:	065e      	lsls	r6, r3, #25
 8003d3e:	bf48      	it	mi
 8003d40:	b2ad      	uxthmi	r5, r5
 8003d42:	e7e6      	b.n	8003d12 <_printf_i+0x182>
 8003d44:	4616      	mov	r6, r2
 8003d46:	e7bb      	b.n	8003cc0 <_printf_i+0x130>
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	6826      	ldr	r6, [r4, #0]
 8003d4c:	6960      	ldr	r0, [r4, #20]
 8003d4e:	1d1d      	adds	r5, r3, #4
 8003d50:	600d      	str	r5, [r1, #0]
 8003d52:	0635      	lsls	r5, r6, #24
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0x1cc>
 8003d58:	6018      	str	r0, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <_printf_i+0x1d2>
 8003d5c:	0671      	lsls	r1, r6, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0x1c8>
 8003d60:	8018      	strh	r0, [r3, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	6123      	str	r3, [r4, #16]
 8003d66:	4616      	mov	r6, r2
 8003d68:	e7ba      	b.n	8003ce0 <_printf_i+0x150>
 8003d6a:	680b      	ldr	r3, [r1, #0]
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	600a      	str	r2, [r1, #0]
 8003d70:	681e      	ldr	r6, [r3, #0]
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	2100      	movs	r1, #0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7fc fa32 	bl	80001e0 <memchr>
 8003d7c:	b108      	cbz	r0, 8003d82 <_printf_i+0x1f2>
 8003d7e:	1b80      	subs	r0, r0, r6
 8003d80:	6060      	str	r0, [r4, #4]
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	6123      	str	r3, [r4, #16]
 8003d86:	2300      	movs	r3, #0
 8003d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d8c:	e7a8      	b.n	8003ce0 <_printf_i+0x150>
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	4632      	mov	r2, r6
 8003d92:	4649      	mov	r1, r9
 8003d94:	4640      	mov	r0, r8
 8003d96:	47d0      	blx	sl
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d0ab      	beq.n	8003cf4 <_printf_i+0x164>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	079b      	lsls	r3, r3, #30
 8003da0:	d413      	bmi.n	8003dca <_printf_i+0x23a>
 8003da2:	68e0      	ldr	r0, [r4, #12]
 8003da4:	9b03      	ldr	r3, [sp, #12]
 8003da6:	4298      	cmp	r0, r3
 8003da8:	bfb8      	it	lt
 8003daa:	4618      	movlt	r0, r3
 8003dac:	e7a4      	b.n	8003cf8 <_printf_i+0x168>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4632      	mov	r2, r6
 8003db2:	4649      	mov	r1, r9
 8003db4:	4640      	mov	r0, r8
 8003db6:	47d0      	blx	sl
 8003db8:	3001      	adds	r0, #1
 8003dba:	d09b      	beq.n	8003cf4 <_printf_i+0x164>
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	9903      	ldr	r1, [sp, #12]
 8003dc2:	1a5b      	subs	r3, r3, r1
 8003dc4:	42ab      	cmp	r3, r5
 8003dc6:	dcf2      	bgt.n	8003dae <_printf_i+0x21e>
 8003dc8:	e7eb      	b.n	8003da2 <_printf_i+0x212>
 8003dca:	2500      	movs	r5, #0
 8003dcc:	f104 0619 	add.w	r6, r4, #25
 8003dd0:	e7f5      	b.n	8003dbe <_printf_i+0x22e>
 8003dd2:	bf00      	nop
 8003dd4:	0800410d 	.word	0x0800410d
 8003dd8:	0800411e 	.word	0x0800411e

08003ddc <memcpy>:
 8003ddc:	440a      	add	r2, r1
 8003dde:	4291      	cmp	r1, r2
 8003de0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003de4:	d100      	bne.n	8003de8 <memcpy+0xc>
 8003de6:	4770      	bx	lr
 8003de8:	b510      	push	{r4, lr}
 8003dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df2:	4291      	cmp	r1, r2
 8003df4:	d1f9      	bne.n	8003dea <memcpy+0xe>
 8003df6:	bd10      	pop	{r4, pc}

08003df8 <memmove>:
 8003df8:	4288      	cmp	r0, r1
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	eb01 0402 	add.w	r4, r1, r2
 8003e00:	d902      	bls.n	8003e08 <memmove+0x10>
 8003e02:	4284      	cmp	r4, r0
 8003e04:	4623      	mov	r3, r4
 8003e06:	d807      	bhi.n	8003e18 <memmove+0x20>
 8003e08:	1e43      	subs	r3, r0, #1
 8003e0a:	42a1      	cmp	r1, r4
 8003e0c:	d008      	beq.n	8003e20 <memmove+0x28>
 8003e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e16:	e7f8      	b.n	8003e0a <memmove+0x12>
 8003e18:	4402      	add	r2, r0
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	428a      	cmp	r2, r1
 8003e1e:	d100      	bne.n	8003e22 <memmove+0x2a>
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e2a:	e7f7      	b.n	8003e1c <memmove+0x24>

08003e2c <_free_r>:
 8003e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d048      	beq.n	8003ec4 <_free_r+0x98>
 8003e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e3e:	bfb8      	it	lt
 8003e40:	18e4      	addlt	r4, r4, r3
 8003e42:	f000 f8d3 	bl	8003fec <__malloc_lock>
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <_free_r+0x9c>)
 8003e48:	9801      	ldr	r0, [sp, #4]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	b933      	cbnz	r3, 8003e5e <_free_r+0x32>
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6014      	str	r4, [r2, #0]
 8003e54:	b003      	add	sp, #12
 8003e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e5a:	f000 b8cd 	b.w	8003ff8 <__malloc_unlock>
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d90b      	bls.n	8003e7a <_free_r+0x4e>
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	1862      	adds	r2, r4, r1
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bf04      	itt	eq
 8003e6a:	681a      	ldreq	r2, [r3, #0]
 8003e6c:	685b      	ldreq	r3, [r3, #4]
 8003e6e:	6063      	str	r3, [r4, #4]
 8003e70:	bf04      	itt	eq
 8003e72:	1852      	addeq	r2, r2, r1
 8003e74:	6022      	streq	r2, [r4, #0]
 8003e76:	602c      	str	r4, [r5, #0]
 8003e78:	e7ec      	b.n	8003e54 <_free_r+0x28>
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b10b      	cbz	r3, 8003e84 <_free_r+0x58>
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	d9fa      	bls.n	8003e7a <_free_r+0x4e>
 8003e84:	6811      	ldr	r1, [r2, #0]
 8003e86:	1855      	adds	r5, r2, r1
 8003e88:	42a5      	cmp	r5, r4
 8003e8a:	d10b      	bne.n	8003ea4 <_free_r+0x78>
 8003e8c:	6824      	ldr	r4, [r4, #0]
 8003e8e:	4421      	add	r1, r4
 8003e90:	1854      	adds	r4, r2, r1
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	6011      	str	r1, [r2, #0]
 8003e96:	d1dd      	bne.n	8003e54 <_free_r+0x28>
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	6053      	str	r3, [r2, #4]
 8003e9e:	4421      	add	r1, r4
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	e7d7      	b.n	8003e54 <_free_r+0x28>
 8003ea4:	d902      	bls.n	8003eac <_free_r+0x80>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	6003      	str	r3, [r0, #0]
 8003eaa:	e7d3      	b.n	8003e54 <_free_r+0x28>
 8003eac:	6825      	ldr	r5, [r4, #0]
 8003eae:	1961      	adds	r1, r4, r5
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	bf04      	itt	eq
 8003eb4:	6819      	ldreq	r1, [r3, #0]
 8003eb6:	685b      	ldreq	r3, [r3, #4]
 8003eb8:	6063      	str	r3, [r4, #4]
 8003eba:	bf04      	itt	eq
 8003ebc:	1949      	addeq	r1, r1, r5
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	6054      	str	r4, [r2, #4]
 8003ec2:	e7c7      	b.n	8003e54 <_free_r+0x28>
 8003ec4:	b003      	add	sp, #12
 8003ec6:	bd30      	pop	{r4, r5, pc}
 8003ec8:	200000b4 	.word	0x200000b4

08003ecc <_malloc_r>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	1ccd      	adds	r5, r1, #3
 8003ed0:	f025 0503 	bic.w	r5, r5, #3
 8003ed4:	3508      	adds	r5, #8
 8003ed6:	2d0c      	cmp	r5, #12
 8003ed8:	bf38      	it	cc
 8003eda:	250c      	movcc	r5, #12
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	4606      	mov	r6, r0
 8003ee0:	db01      	blt.n	8003ee6 <_malloc_r+0x1a>
 8003ee2:	42a9      	cmp	r1, r5
 8003ee4:	d903      	bls.n	8003eee <_malloc_r+0x22>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	2000      	movs	r0, #0
 8003eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eee:	f000 f87d 	bl	8003fec <__malloc_lock>
 8003ef2:	4921      	ldr	r1, [pc, #132]	; (8003f78 <_malloc_r+0xac>)
 8003ef4:	680a      	ldr	r2, [r1, #0]
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	b99c      	cbnz	r4, 8003f22 <_malloc_r+0x56>
 8003efa:	4f20      	ldr	r7, [pc, #128]	; (8003f7c <_malloc_r+0xb0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b923      	cbnz	r3, 8003f0a <_malloc_r+0x3e>
 8003f00:	4621      	mov	r1, r4
 8003f02:	4630      	mov	r0, r6
 8003f04:	f000 f862 	bl	8003fcc <_sbrk_r>
 8003f08:	6038      	str	r0, [r7, #0]
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f000 f85d 	bl	8003fcc <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d123      	bne.n	8003f5e <_malloc_r+0x92>
 8003f16:	230c      	movs	r3, #12
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f86c 	bl	8003ff8 <__malloc_unlock>
 8003f20:	e7e3      	b.n	8003eea <_malloc_r+0x1e>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	1b5b      	subs	r3, r3, r5
 8003f26:	d417      	bmi.n	8003f58 <_malloc_r+0x8c>
 8003f28:	2b0b      	cmp	r3, #11
 8003f2a:	d903      	bls.n	8003f34 <_malloc_r+0x68>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	441c      	add	r4, r3
 8003f30:	6025      	str	r5, [r4, #0]
 8003f32:	e004      	b.n	8003f3e <_malloc_r+0x72>
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	42a2      	cmp	r2, r4
 8003f38:	bf0c      	ite	eq
 8003f3a:	600b      	streq	r3, [r1, #0]
 8003f3c:	6053      	strne	r3, [r2, #4]
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f000 f85a 	bl	8003ff8 <__malloc_unlock>
 8003f44:	f104 000b 	add.w	r0, r4, #11
 8003f48:	1d23      	adds	r3, r4, #4
 8003f4a:	f020 0007 	bic.w	r0, r0, #7
 8003f4e:	1ac2      	subs	r2, r0, r3
 8003f50:	d0cc      	beq.n	8003eec <_malloc_r+0x20>
 8003f52:	1a1b      	subs	r3, r3, r0
 8003f54:	50a3      	str	r3, [r4, r2]
 8003f56:	e7c9      	b.n	8003eec <_malloc_r+0x20>
 8003f58:	4622      	mov	r2, r4
 8003f5a:	6864      	ldr	r4, [r4, #4]
 8003f5c:	e7cc      	b.n	8003ef8 <_malloc_r+0x2c>
 8003f5e:	1cc4      	adds	r4, r0, #3
 8003f60:	f024 0403 	bic.w	r4, r4, #3
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d0e3      	beq.n	8003f30 <_malloc_r+0x64>
 8003f68:	1a21      	subs	r1, r4, r0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 f82e 	bl	8003fcc <_sbrk_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d1dd      	bne.n	8003f30 <_malloc_r+0x64>
 8003f74:	e7cf      	b.n	8003f16 <_malloc_r+0x4a>
 8003f76:	bf00      	nop
 8003f78:	200000b4 	.word	0x200000b4
 8003f7c:	200000b8 	.word	0x200000b8

08003f80 <_realloc_r>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	4607      	mov	r7, r0
 8003f84:	4614      	mov	r4, r2
 8003f86:	460e      	mov	r6, r1
 8003f88:	b921      	cbnz	r1, 8003f94 <_realloc_r+0x14>
 8003f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f8e:	4611      	mov	r1, r2
 8003f90:	f7ff bf9c 	b.w	8003ecc <_malloc_r>
 8003f94:	b922      	cbnz	r2, 8003fa0 <_realloc_r+0x20>
 8003f96:	f7ff ff49 	bl	8003e2c <_free_r>
 8003f9a:	4625      	mov	r5, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	f000 f830 	bl	8004004 <_malloc_usable_size_r>
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d20f      	bcs.n	8003fc8 <_realloc_r+0x48>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4638      	mov	r0, r7
 8003fac:	f7ff ff8e 	bl	8003ecc <_malloc_r>
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d0f2      	beq.n	8003f9c <_realloc_r+0x1c>
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4622      	mov	r2, r4
 8003fba:	f7ff ff0f 	bl	8003ddc <memcpy>
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f7ff ff33 	bl	8003e2c <_free_r>
 8003fc6:	e7e9      	b.n	8003f9c <_realloc_r+0x1c>
 8003fc8:	4635      	mov	r5, r6
 8003fca:	e7e7      	b.n	8003f9c <_realloc_r+0x1c>

08003fcc <_sbrk_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d06      	ldr	r5, [pc, #24]	; (8003fe8 <_sbrk_r+0x1c>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	f7fc ff46 	bl	8000e68 <_sbrk>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_sbrk_r+0x1a>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_sbrk_r+0x1a>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	20000194 	.word	0x20000194

08003fec <__malloc_lock>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__malloc_lock+0x8>)
 8003fee:	f000 b811 	b.w	8004014 <__retarget_lock_acquire_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	2000019c 	.word	0x2000019c

08003ff8 <__malloc_unlock>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__malloc_unlock+0x8>)
 8003ffa:	f000 b80c 	b.w	8004016 <__retarget_lock_release_recursive>
 8003ffe:	bf00      	nop
 8004000:	2000019c 	.word	0x2000019c

08004004 <_malloc_usable_size_r>:
 8004004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004008:	1f18      	subs	r0, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfbc      	itt	lt
 800400e:	580b      	ldrlt	r3, [r1, r0]
 8004010:	18c0      	addlt	r0, r0, r3
 8004012:	4770      	bx	lr

08004014 <__retarget_lock_acquire_recursive>:
 8004014:	4770      	bx	lr

08004016 <__retarget_lock_release_recursive>:
 8004016:	4770      	bx	lr

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
